<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICalVCard</name>
    </assembly>
    <members>
        <member name="M:iCal.ILoadable.OnLoaded">
            <summary>
            Fires the Loaded event.
            </summary>
        </member>
        <member name="P:iCal.ILoadable.IsLoaded">
            <summary>
            Gets whether or not the object has been loaded.
            </summary>
        </member>
        <member name="E:iCal.ILoadable.Loaded">
            <summary>
            An event that fires when the object has been loaded.
            </summary>
        </member>
        <member name="M:iCal.ICopyable.CopyFrom(iCal.ICopyable)">
            <summary>
            Copies all relevant fields/properties from
            the target object to the current one.
            </summary>
        </member>
        <member name="M:iCal.ICopyable.Copy``1">
            <summary>
            Returns a copy of the current object, including
            all relevent fields/properties, resulting in a
            semantically equivalent copy of the object.
            (which consequently passes an object.Equals(obj1, obj2)
            test).
            </summary>
        </member>
        <member name="M:iCal.ICalendarObject.AddChild(iCal.ICalendarObject)">
            <summary>
            Adds a child object to the current object.
            </summary>
        </member>
        <member name="M:iCal.ICalendarObject.RemoveChild(iCal.ICalendarObject)">
            <summary>
            Removes a child object from the current object.
            </summary>
        </member>
        <member name="P:iCal.ICalendarObject.Name">
            <summary>
            The name of the calendar object.
            Every calendar object can be assigned
            a name.
            </summary>
        </member>
        <member name="P:iCal.ICalendarObject.Parent">
            <summary>
            Returns the parent of this object.
            </summary>
        </member>
        <member name="P:iCal.ICalendarObject.Children">
            <summary>
            Returns a list of children of this object.
            </summary>
        </member>
        <member name="P:iCal.ICalendarObject.Calendar">
            <summary>
            Returns the iCalendar that this object
            is associated with.
            </summary>
        </member>
        <member name="P:iCal.ICalendarObject.Line">
            <summary>
            Returns the line number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="P:iCal.ICalendarObject.Column">
            <summary>
            Returns the column number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="T:iCal.EncodableDataType">
            <summary>
            An abstract class from which all iCalendar data types inherit.
            </summary>
        </member>
        <member name="T:iCal.CalendarDataType">
            <summary>
            An abstract class from which all iCalendar data types inherit.
            </summary>
        </member>
        <member name="M:iCal.CalendarDataType.CopyFrom(iCal.ICopyable)">
            <summary>
            Copies values from the target object to the
            current object.
            </summary>
        </member>
        <member name="M:iCal.CalendarDataType.Copy``1">
            <summary>
            Creates a copy of the object.
            </summary>
            <returns>The copy of the object.</returns>
        </member>
        <member name="T:iCal.UniqueComponent">
            <summary>
            Represents a unique component, a component with a unique UID,
            which can be used to uniquely identify the component.    
            </summary>
        </member>
        <member name="T:iCal.CalendarComponent">
            <summary>
            This class is used by the parsing framework for iCalendar components.
            Generally, you should not need to use this class directly.
            </summary>
        </member>
        <member name="T:iCal.CalendarObject">
            <summary>
            The base class for all iCalendar objects and components.
            </summary>
        </member>
        <member name="M:iCal.CalendarObjectBase.CopyFrom(iCal.ICopyable)">
            <summary>
            Copies values from the target object to the
            current object.
            </summary>
        </member>
        <member name="M:iCal.CalendarObjectBase.Copy``1">
            <summary>
            Creates a copy of the object.
            </summary>
            <returns>The copy of the object.</returns>
        </member>
        <member name="M:iCal.CalendarObject.AddChild(iCal.ICalendarObject)">
            <summary>
            Adds an <see cref="T:iCal.ICalendarObject"/>-based object as a child
            of the current object.
            </summary>
            <param name="child">The <see cref="T:iCal.ICalendarObject"/>-based object to add.</param>
        </member>
        <member name="M:iCal.CalendarObject.RemoveChild(iCal.ICalendarObject)">
            <summary>
            Removed an <see cref="T:iCal.ICalendarObject"/>-based object from the <see cref="P:iCal.CalendarObject.Children"/>
            collection.
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:iCal.CalendarObject.Parent">
            <summary>
            Returns the parent <see cref="T:iCal.ICalendarObject"/> that owns this one.
            </summary>
        </member>
        <member name="P:iCal.CalendarObject.Children">
            <summary>
            A collection of <see cref="T:iCal.ICalendarObject"/>s that are children 
            of the current object.
            </summary>
        </member>
        <member name="P:iCal.CalendarObject.Name">
            <summary>
            Gets or sets the name of the <see cref="T:iCal.ICalendarObject"/>.  For iCalendar components,
            this is the RFC 5545 name of the component.
            <example>
                <list type="bullet">
                    <item>Event - "VEVENT"</item>
                    <item>Todo - "VTODO"</item>
                    <item>TimeZone - "VTIMEZONE"</item>
                    <item>etc.</item>
                </list>
            </example>
            </summary>        
        </member>
        <member name="P:iCal.CalendarObject.Calendar">
            <summary>
            Returns the <see cref="T:iCal.iCalendar"/> that this <see cref="T:iCal.ICalendarObject"/>
            belongs to.
            </summary>
        </member>
        <member name="M:iCal.CalendarComponent.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads an iCalendar component (Event, Todo, Journal, etc.) from an open stream.
            </summary>
        </member>
        <member name="M:iCal.CalendarComponent.AddProperty(System.String,System.String)">
            <summary>
            Adds a property to this component.
            </summary>
        </member>
        <member name="M:iCal.CalendarComponent.AddProperty(iCal.CalendarProperty)">
            <summary>
            Adds a property to this component.
            </summary>
        </member>
        <member name="P:iCal.CalendarComponent.Properties">
            <summary>
            Returns a list of properties that are associated with the iCalendar object.
            </summary>
        </member>
        <member name="E:iCal.IUniqueComponent.UIDChanged">
            <summary>
            Fires when the UID of the component has changed.
            </summary>
        </member>
        <member name="T:iCal.Event">
            <summary>
            A class that represents an RFC 5545 VEVENT component.
            </summary>
            <note>
                TODO: Add support for the following properties:
                <list type="bullet">
                    <item>Add support for the Organizer and Attendee properties</item>
                    <item>Add support for the Class property</item>
                    <item>Add support for the Geo property</item>
                    <item>Add support for the Priority property</item>
                    <item>Add support for the Related property</item>
                    <item>Create a TextCollection DataType for 'text' items separated by commas</item>
                </list>
            </note>
        </member>
        <member name="T:iCal.RecurringComponent">
            <summary>
            An iCalendar component that recurs.
            </summary>
            <remarks>
            This component automatically handles
            RRULEs, RDATE, EXRULEs, and EXDATEs, as well as the DTSTART
            for the recurring item (all recurring items must have a DTSTART).
            </remarks>
        </member>
        <member name="M:iCal.IGetOccurrences.ClearEvaluation">
            <summary>
            Clears a previous evaluation, usually because one of the 
            key elements used for evaluation has changed 
            (Start, End, Duration, recurrence rules, exceptions, etc.).
            </summary>
        </member>
        <member name="M:iCal.IGetOccurrences.GetOccurrences(iCal.IDateTime)">
            <summary>
            Returns all occurrences of this component that start on the date provided.
            All components starting between 12:00:00AM and 11:59:59 PM will be
            returned.
            <note>
            This will first Evaluate() the date range required in order to
            determine the occurrences for the date provided, and then return
            the occurrences.
            </note>
            </summary>
            <param name="dt">The date for which to return occurrences.</param>
            <returns>A list of Periods representing the occurrences of this object.</returns>
        </member>
        <member name="M:iCal.IGetOccurrences.GetOccurrences(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Returns all occurrences of this component that start within the date range provided.
            All components occurring between <paramref name="startTime"/> and <paramref name="endTime"/>
            will be returned.
            </summary>
            <param name="startTime">The starting date range</param>
            <param name="endTime">The ending date range</param>
        </member>
        <member name="P:iCal.IRecurrable.Start">
            <summary>
            Gets/sets the start date/time of the component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iCal.IAlarmContainer.PollAlarms(iCal.IDateTime,iCal.IDateTime)" -->
        <member name="P:iCal.IAlarmContainer.Alarms">
            <summary>
            A list of <see cref="T:iCal.Alarm"/>s for this recurring component.
            </summary>
        </member>
        <member name="P:iCal.RecurringComponent.DTStart">
            <summary>
            The start date/time of the component.
            </summary>
        </member>
        <member name="P:iCal.RecurringComponent.Start">
            <summary>
            An alias to the DTStart field (i.e. start date/time).
            </summary>
        </member>
        <member name="P:iCal.RecurringComponent.Alarms">
            <summary>
            A list of <see cref="T:iCal.Alarm"/>s for this recurring component.
            </summary>
        </member>
        <member name="P:iCal.IEvent.DTEnd">
            <summary>
            The end date/time of the event.
            <note>
            If the duration has not been set, but
            the start/end time of the event is available,
            the duration is automatically determined.
            Likewise, if an end time and duration are available,
            but a start time has not been set, the start time
            will be extrapolated.
            </note>
            </summary>
        </member>
        <member name="P:iCal.IEvent.Duration">
            <summary>
            The duration of the event.
            <note>
            If a start time and duration is available,
            the end time is automatically determined.
            Likewise, if the end time and duration is
            available, but a start time is not determined,
            the start time will be extrapolated from
            available information.
            </note>
            </summary>
        </member>
        <member name="P:iCal.IEvent.End">
            <summary>
            An alias to the DTEnd field (i.e. end date/time).
            </summary>
        </member>
        <member name="P:iCal.IEvent.IsAllDay">
            <summary>
            Returns true if the event is an all-day event.
            </summary>
        </member>
        <member name="P:iCal.IEvent.GeographicLocation">
            <summary>
            The geographic location (lat/long) of the event.
            </summary>
        </member>
        <member name="P:iCal.IEvent.Location">
            <summary>
            The location of the event.
            </summary>
        </member>
        <member name="P:iCal.IEvent.Resources">
            <summary>
            Resources that will be used during the event.
            <example>Conference room #2</example>
            <example>Projector</example>
            </summary>
        </member>
        <member name="P:iCal.IEvent.Status">
            <summary>
            The status of the event.
            </summary>
        </member>
        <member name="P:iCal.IEvent.Transparency">
            <summary>
            The transparency of the event.  In other words,
            whether or not the period of time this event
            occupies can contain other events (transparent),
            or if the time cannot be scheduled for anything
            else (opaque).
            </summary>
        </member>
        <member name="M:iCal.Event.#ctor">
            <summary>
            Constructs an Event object, with an <see cref="T:iCal.ICalendarObject"/>
            (usually an iCalendar object) as its parent.
            </summary>
            <param name="parent">An <see cref="T:iCal.ICalendarObject"/>, usually an iCalendar object.</param>
        </member>
        <member name="M:iCal.Event.OccursOn(iCal.IDateTime)">
            <summary>
            Use this method to determine if an event occurs on a given date.
            <note type="caution">
                This event should be called only after the <see cref="!:Evaluate"/>
                method has calculated the dates for which this event occurs.
            </note>
            </summary>
            <param name="DateTime">The date to test.</param>
            <returns>True if the event occurs on the <paramref name="DateTime"/> provided, False otherwise.</returns>
        </member>
        <member name="M:iCal.Event.OccursAt(iCal.IDateTime)">
            <summary>
            Use this method to determine if an event begins at a given date and time.
            </summary>
            <param name="DateTime">The date and time to test.</param>
            <returns>True if the event begins at the given date and time</returns>
        </member>
        <member name="M:iCal.Event.IsActive">
            <summary>
            Determines whether or not the <see cref="T:iCal.Event"/> is actively displayed
            as an upcoming or occurred event.
            </summary>
            <returns>True if the event has not been cancelled, False otherwise.</returns>
        </member>
        <member name="P:iCal.Event.DTStart">
            <summary>
            The start date/time of the event.
            <note>
            If the duration has not been set, but
            the start/end time of the event is available,
            the duration is automatically determined.
            Likewise, if the end date/time has not been
            set, but a start and duration are available,
            the end date/time will be extrapolated.
            </note>
            </summary>
        </member>
        <member name="P:iCal.Event.DTEnd">
            <summary>
            The end date/time of the event.
            <note>
            If the duration has not been set, but
            the start/end time of the event is available,
            the duration is automatically determined.
            Likewise, if an end time and duration are available,
            but a start time has not been set, the start time
            will be extrapolated.
            </note>
            </summary>
        </member>
        <member name="P:iCal.Event.Duration">
            <summary>
            The duration of the event.
            <note>
            If a start time and duration is available,
            the end time is automatically determined.
            Likewise, if the end time and duration is
            available, but a start time is not determined,
            the start time will be extrapolated from
            available information.
            </note>
            </summary>
        </member>
        <member name="P:iCal.Event.End">
            <summary>
            An alias to the DTEnd field (i.e. end date/time).
            </summary>
        </member>
        <member name="P:iCal.Event.IsAllDay">
            <summary>
            Returns true if the event is an all-day event.
            </summary>
        </member>
        <member name="P:iCal.Event.GeographicLocation">
            <summary>
            The geographic location (lat/long) of the event.
            </summary>
        </member>
        <member name="P:iCal.Event.Location">
            <summary>
            The location of the event.
            </summary>
        </member>
        <member name="P:iCal.Event.Resources">
            <summary>
            Resources that will be used during the event.
            <example>Conference room #2</example>
            <example>Projector</example>
            </summary>
        </member>
        <member name="P:iCal.Event.Status">
            <summary>
            The status of the event.
            </summary>
        </member>
        <member name="P:iCal.Event.Transparency">
            <summary>
            The transparency of the event.  In other words,
            whether or not the period of time this event
            occupies can contain other events (transparent),
            or if the time cannot be scheduled for anything
            else (opaque).
            </summary>
        </member>
        <member name="T:antlr.collections.AST">
            <summary>
            Minimal AST node interface used by ANTLR AST generation and tree-walker.
            </summary>
        </member>
        <member name="M:antlr.collections.AST.addChild(antlr.collections.AST)">
            <summary>
            Add a (rightmost) child to this node
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:antlr.collections.AST.getFirstChild">
            <summary>
            Get the first child of this node; null if no children
            </summary>
        </member>
        <member name="M:antlr.collections.AST.getNextSibling">
            <summary>
            Get	the next sibling in line after this one
            </summary>
        </member>
        <member name="M:antlr.collections.AST.getText">
            <summary>
            Get the token text for this node
            </summary>
            <returns></returns>
        </member>
        <member name="M:antlr.collections.AST.getNumberOfChildren">
            <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
            <returns>Number of children</returns>
        </member>
        <member name="M:antlr.collections.AST.setFirstChild(antlr.collections.AST)">
            <summary>
            Set the first child of a node.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:antlr.collections.AST.setNextSibling(antlr.collections.AST)">
            <summary>
            Set the next sibling after this one.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:antlr.collections.AST.setText(System.String)">
            <summary>
            Set the token text for this node
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:antlr.collections.AST.setType(System.Int32)">
            <summary>
            Set the token type for this node
            </summary>
            <param name="ttype"></param>
        </member>
        <member name="P:antlr.collections.AST.Type">
            <summary>
            Get the token type for this node
            </summary>
        </member>
        <member name="M:antlr.BaseAST.getNumberOfChildren">
            <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
            <returns>Number of children</returns>
        </member>
        <member name="M:antlr.ParseTree.getLeftmostDerivationStep(System.Int32)">
            <summary>
            Walk parse tree and return requested number of derivation steps.
            If steps less-than 0, return node text.  If steps equals 1, return derivation
            string at step.
            </summary>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="M:antlr.ParseTree.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
            <summary>
            Get derivation and return how many you did (less than requested for
            subtree roots.
            </summary>
            <param name="buf">string buffer</param>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="T:antlr.InputBuffer">
            <summary>
            Represents a stream of characters fed to the lexer from that can be rewound 
            via mark()/rewind() methods.
            </summary>
            <remarks>
            <para>
            A dynamic array is used to buffer up all the input characters.  Normally,
            "k" characters are stored in the buffer.  More characters may be stored 
            during guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
            Consumption of characters is deferred.  In other words, reading the next
            character is not done by conume(), but deferred until needed by LA or LT.
            </para>
            </remarks>
        </member>
        <member name="F:antlr.CharBuffer.buf">
            <summary>
            Small buffer used to avoid reading individual chars
            </summary>
        </member>
        <member name="T:antlr.debug.InputBufferListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.InputBufferListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.InputBufferListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferConsume(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "CharConsumed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferLA(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "CharLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferMark(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "Mark" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.InputBufferListenerBase.inputBufferRewind(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary>
            Handle the "Rewind" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:vCards.vCard">
            <summary>
                A vCard object for exchanging personal contact information.
            </summary>
            <remarks>
                <para>
                    A vCard contains personal information, such as postal
                    addresses, public security certificates, email addresses, and
                    web sites.  The vCard specification makes it possible for
                    different computer programs to exchange personal contact
                    information; for example, a vCard can be attached to an email or
                    sent over a wireless connection.
                </para>
                <para>
                    The standard vCard format is a text file with properties in
                    name:value format.  However, there are multiple versions of
                    this format as well as compatible alternatives in XML and
                    HTML formats.  This class library aims to accomodate these
                    variations but be aware some some formats do not support
                    all possible properties.
                </para>
            </remarks>
        </member>
        <member name="M:vCards.vCard.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:vCards.vCard"/> class.
            </summary>
        </member>
        <member name="M:vCards.vCard.#ctor(System.IO.TextReader)">
            <summary>
                Loads a new instance of the <see cref="T:vCards.vCard"/> class
                from a text reader.
            </summary>
            <param name="input">
                An initialized text reader.
            </param>
        </member>
        <member name="M:vCards.vCard.#ctor(System.String)">
            <summary>
                Loads a new instance of the <see cref="T:vCards.vCard"/> class
                from a text file.
            </summary>
            <param name="path">
                The path to a text file containing vCard data in
                any recognized vCard format.
            </param>
        </member>
        <member name="M:vCards.vCard.ToString">
            <summary>
                Builds a string that represents the vCard.
            </summary>
            <returns>
                The formatted name of the contact person, if defined,
                or the default object.ToString().
            </returns>
        </member>
        <member name="P:vCards.vCard.AccessClassification">
            <summary>
                The security access classification of the vCard owner (e.g. private).
            </summary>
        </member>
        <member name="P:vCards.vCard.AdditionalNames">
            <summary>
                Any additional (e.g. middle) names of the person.
            </summary>
            <seealso cref="P:vCards.vCard.FamilyName"/>
            <seealso cref="P:vCards.vCard.FormattedName"/>
            <seealso cref="P:vCards.vCard.GivenName"/>
            <seealso cref="P:vCards.vCard.Nicknames"/>
        </member>
        <member name="P:vCards.vCard.BirthDate">
            <summary>
                The birthdate of the person.
            </summary>
        </member>
        <member name="P:vCards.vCard.Categories">
            <summary>
                Categories of the vCard.
            </summary>
            <remarks>
                This property is a collection of strings containing
                keywords or category names.
            </remarks>
        </member>
        <member name="P:vCards.vCard.Certificates">
            <summary>
                Public key certificates attached to the vCard.
            </summary>
            <seealso cref="T:vCards.vCardCertificate"/>
        </member>
        <member name="P:vCards.vCard.DeliveryAddresses">
            <summary>
                Delivery addresses associated with the person.
            </summary>
        </member>
        <member name="P:vCards.vCard.DeliveryLabels">
            <summary>
                Formatted delivery labels.
            </summary>
        </member>
        <member name="P:vCards.vCard.Department">
            <summary>
                The department of the person in the organization.
            </summary>
            <seealso cref="P:vCards.vCard.Office"/>
            <seealso cref="P:vCards.vCard.Organization"/>
        </member>
        <member name="P:vCards.vCard.DisplayName">
            <summary>
                The display name of the vCard.
            </summary>
            <remarks>
                This property is used by vCard applications for titles,
                headers, and other visual elements.
            </remarks>
        </member>
        <member name="P:vCards.vCard.EmailAddresses">
            <summary>
                A collection of <see cref="T:vCards.vCardEmailAddress"/> objects for the person.
            </summary>
            <seealso cref="T:vCards.vCardEmailAddress"/>
        </member>
        <member name="P:vCards.vCard.FamilyName">
            <summary>
                The family (last) name of the person.
            </summary>
            <seealso cref="P:vCards.vCard.AdditionalNames"/>
            <seealso cref="P:vCards.vCard.FormattedName"/>
            <seealso cref="P:vCards.vCard.GivenName"/>
            <seealso cref="P:vCards.vCard.Nicknames"/>
        </member>
        <member name="P:vCards.vCard.FormattedName">
            <summary>
                The formatted name of the person.
            </summary>
            <remarks>
                This property allows the name of the person to be
                written in a manner specific to his or her culture.
                The formatted name is not required to strictly
                correspond with the family name, given name, etc.
            </remarks>
            <seealso cref="P:vCards.vCard.AdditionalNames"/>
            <seealso cref="P:vCards.vCard.FamilyName"/>
            <seealso cref="P:vCards.vCard.GivenName"/>
            <seealso cref="P:vCards.vCard.Nicknames"/>
        </member>
        <member name="P:vCards.vCard.Gender">
            <summary>
                The gender of the person.
            </summary>
            <remarks>
                The vCard specification does not define a property
                to indicate the gender of the contact.  Microsoft
                Outlook implements it as a custom property named
                X-WAB-GENDER.
            </remarks>
            <seealso cref="T:vCards.vCardGender"/>
        </member>
        <member name="P:vCards.vCard.GivenName">
            <summary>
                The given (first) name of the person.
            </summary>
            <seealso cref="P:vCards.vCard.AdditionalNames"/>
            <seealso cref="P:vCards.vCard.FamilyName"/>
            <seealso cref="P:vCards.vCard.FormattedName"/>
            <seealso cref="P:vCards.vCard.Nicknames"/>
        </member>
        <member name="P:vCards.vCard.Latitude">
            <summary>
                The latitude of the person in decimal degrees.
            </summary>
            <seealso cref="P:vCards.vCard.Longitude"/>
        </member>
        <member name="P:vCards.vCard.Longitude">
            <summary>
                The longitude of the person in decimal degrees.
            </summary>
            <seealso cref="P:vCards.vCard.Latitude"/>
        </member>
        <member name="P:vCards.vCard.Mailer">
            <summary>
                The mail software used by the person.
            </summary>
        </member>
        <member name="P:vCards.vCard.NamePrefix">
            <summary>
                The prefix (e.g. "Mr.") of the person.
            </summary>
            <seealso cref="P:vCards.vCard.NameSuffix"/>
        </member>
        <member name="P:vCards.vCard.NameSuffix">
            <summary>
                The suffix (e.g. "Jr.") of the person.
            </summary>
            <seealso cref="P:vCards.vCard.NamePrefix"/>
        </member>
        <member name="P:vCards.vCard.Nicknames">
            <summary>
                A collection of nicknames for the person.
            </summary>
            <seealso cref="P:vCards.vCard.AdditionalNames"/>
            <seealso cref="P:vCards.vCard.FamilyName"/>
            <seealso cref="P:vCards.vCard.FormattedName"/>
            <seealso cref="P:vCards.vCard.GivenName"/>
        </member>
        <member name="P:vCards.vCard.Notes">
            <summary>
                A collection of notes or comments.
            </summary>
        </member>
        <member name="P:vCards.vCard.Office">
            <summary>
                The office of the person at the organization.
            </summary>
            <seealso cref="P:vCards.vCard.Department"/>
            <seealso cref="P:vCards.vCard.Organization"/>
        </member>
        <member name="P:vCards.vCard.Organization">
            <summary>
                The organization or company of the person.
            </summary>
            <seealso cref="P:vCards.vCard.Office"/>
            <seealso cref="P:vCards.vCard.Role"/>
            <seealso cref="P:vCards.vCard.Title"/>
        </member>
        <member name="P:vCards.vCard.Phones">
            <summary>
                A collection of telephone numbers.
            </summary>
        </member>
        <member name="P:vCards.vCard.Photos">
            <summary>
                A collection of photographic images embedded or 
                referenced by the vCard.
            </summary>
        </member>
        <member name="P:vCards.vCard.ProductId">
            <summary>
                The name of the product that generated the vCard.
            </summary>
        </member>
        <member name="P:vCards.vCard.RevisionDate">
            <summary>
                The revision date of the vCard.
            </summary>
            <remarks>
                The revision date is not automatically updated by the
                vCard when modifying properties.  It is up to the 
                developer to change the revision date as needed.
            </remarks>
        </member>
        <member name="P:vCards.vCard.Role">
            <summary>
                The role of the person (e.g. Executive).
            </summary>
            <remarks>
                The role is shown as "Profession" in Microsoft Outlook.
            </remarks>
            <seealso cref="P:vCards.vCard.Department"/>
            <seealso cref="P:vCards.vCard.Office"/>
            <seealso cref="P:vCards.vCard.Organization"/>
            <seealso cref="P:vCards.vCard.Title"/>
        </member>
        <member name="P:vCards.vCard.Sources">
            <summary>
                Directory sources for the vCard information.
            </summary>
            <remarks>
                A vCard may contain zero or more sources.  A source
                identifies a directory that contains (or provided)
                information found in the vCard.  A program can
                hypothetically connect to the source in order to
                obtain updated information.
            </remarks>
        </member>
        <member name="P:vCards.vCard.TimeZone">
            <summary>
                A string identifying the time zone of the entity
                represented by the vCard.
            </summary>
        </member>
        <member name="P:vCards.vCard.Title">
            <summary>
                The job title of the person.
            </summary>
            <seealso cref="P:vCards.vCard.Organization"/>
            <seealso cref="P:vCards.vCard.Role"/>
        </member>
        <member name="P:vCards.vCard.UniqueId">
            <summary>
                A value that uniquely identifies the vCard.
            </summary>
            <remarks>
                This value is optional.  The string must be any string
                that can be used to uniquely identify the vCard.  The
                usage of the field is determined by the software.  Typical
                possibilities for a unique string include a URL, a GUID,
                or an LDAP directory path.  However, there is no particular
                standard dictated by the vCard specification.
            </remarks>
        </member>
        <member name="P:vCards.vCard.Websites">
            <summary>
                Web sites associated with the person.
            </summary>
            <seealso cref="T:vCards.vCardWebsite"/>
            <seealso cref="T:vCards.vCardWebsiteCollection"/>
        </member>
        <member name="F:antlr.CharScanner.tokenCreator">
            <summary>Used for creating Token instances.</summary>
        </member>
        <member name="F:antlr.CharScanner.cached_LA1">
            <summary>Used for caching lookahead characters.</summary>
        </member>
        <member name="M:antlr.CharScanner.panic(System.String)">
            <summary>
            This method is executed by ANTLR internally when it detected an illegal
            state that cannot be recovered from.
            The previous implementation of this method called <see cref="M:System.Environment.Exit(System.Int32)"/>
            and writes directly to <see cref="P:System.Console.Error"/>, which is usually not 
            appropriate when a translator is embedded into a larger application.
            </summary>
            <param name="s">Error message.</param>
        </member>
        <member name="T:antlr.TokenCreator">
            <summary>
            A creator of Token object instances.
            </summary>
            <remarks>
            <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of Token objects.
            </para>
            <para>
            Since Lexers in ANTLR use a single Token type, each TokenCreator can 
            create one class of Token objects (that's why it's not called TokenFactory).
            </para>
            </remarks>
        </member>
        <member name="M:antlr.TokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.TokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="F:antlr.CharScanner.ReflectionBasedTokenCreator.tokenTypeName">
            <summary>
            The fully qualified name of the Token type to create.
            </summary>
        </member>
        <member name="F:antlr.CharScanner.ReflectionBasedTokenCreator.tokenTypeObject">
            <summary>
            Type object used as a template for creating tokens by reflection.
            </summary>
        </member>
        <member name="M:antlr.CharScanner.ReflectionBasedTokenCreator.SetTokenType(System.String)">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:antlr.CharScanner.ReflectionBasedTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CharScanner.ReflectionBasedTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="M:iCal.IMergeable.MergeWith(iCal.IMergeable)">
            <summary>
            Merges this object with another.
            </summary>
        </member>
        <member name="M:iCal.IKeyedList`2.ContainsKey(`1)">
            <summary>
            Returns true if the list contains at least one 
            object with a matching key, false otherwise.
            </summary>
        </member>
        <member name="M:iCal.IKeyedList`2.IndexOf(`1)">
            <summary>
            Returns the index of the first object
            with the matching key.
            </summary>
        </member>
        <member name="M:iCal.IKeyedList`2.CountOf(`1)">
            <summary>
            Returns the number of objects in the list
            with a matching key.
            </summary>
        </member>
        <member name="M:iCal.IKeyedList`2.AllOf(`1)">
            <summary>
            Returns an enumerable list of objects that
            match the specified key.
            </summary>
        </member>
        <member name="M:iCal.IKeyedList`2.Remove(`1)">
            <summary>
            Removes all objects with the matching <paramref name="key"/>.
            </summary>
            <returns>True if any objects were removed, false otherwise.</returns>
        </member>
        <member name="M:iCal.IKeyedList`2.ToArray">
            <summary>
            Converts the list to an array of the values contained therein.
            </summary>
        </member>
        <member name="P:iCal.IKeyedList`2.Item(`1)">
            <summary>
            Gets/sets an object with the matching key to
            the provided value.  When setting the value,
            if another object with a matching key exists,
            it will be overwritten.  If overwriting is
            not desired, use the Add() method instead.
            </summary>
        </member>
        <member name="T:iCal.CalendarProperty">
            <summary>
            A class that represents a property of the <see cref="T:iCal.iCalendar"/>
            itself or one of its components.  It can also represent non-standard
            (X-) properties of an iCalendar component, as seen with many
            applications, such as with Apple's iCal.
            X-WR-CALNAME:US Holidays
            </summary>
            <remarks>
            Currently, the "known" properties for an iCalendar are as
            follows:
            <list type="bullet">
                <item>ProdID</item>
                <item>Version</item>
                <item>CalScale</item>
                <item>Method</item>
            </list>
            There may be other, custom X-properties applied to the calendar,
            and X-properties may be applied to calendar components.
            </remarks>
        </member>
        <member name="M:iCal.CalendarProperty.AddParameter(System.String,System.String)">
            <summary>
            Adds a parameter to the iCalendar object.
            </summary>
        </member>
        <member name="M:iCal.CalendarProperty.AddParameter(iCal.ICalendarParameter)">
            <summary>
            Adds a parameter to the iCalendar object.
            </summary>
        </member>
        <member name="P:iCal.CalendarProperty.Parameters">
            <summary>
            Returns a list of parameters that are associated with the iCalendar object.
            </summary>
        </member>
        <member name="M:iCal.IEvaluator.Clear">
            <summary>
            Clears the evaluation, eliminating all data that has
            been collected up to this point.  Since this data is cached
            as needed, this method can be useful to gather information
            that is guaranteed to not be out-of-date.
            </summary>
        </member>
        <member name="M:iCal.IEvaluator.Evaluate(iCal.IDateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Evaluates this item to determine the dates and times for which it occurs/recurs.
            This method only evaluates items which occur/recur between <paramref name="fromDate"/>
            and <paramref name="toDate"/>; therefore, if you require a list of items which
            occur outside of this range, you must specify a <paramref name="fromDate"/> and
            <paramref name="toDate"/> which encapsulate the date(s) of interest.
            This method evaluates using the <paramref name="startDate"/> as the beginning
            point.  For example, for a WEEKLY occurrence, the <paramref name="startDate"/>
            determines the day of week that this item will recur on.
            <note type="caution">
                For events with very complex recurrence rules, this method may be a bottleneck
                during processing time, especially when this method is called for a large number
                of items, in sequence, or for a very large time span.
            </note>
            </summary>
            <param name="startDate">The date to begin evaluation from.</param>
            <param name="fromDate">The beginning date of the range to evaluate.</param>
            <param name="toDate">The end date of the range to evaluate.</param>
            <returns>
                A list of <see cref="T:System.DateTime"/> objects for
                each date/time when this item occurs/recurs.
            </returns>
        </member>
        <member name="P:iCal.IEvaluator.Calendar">
            <summary>
            The system calendar that governs the evaluation rules.
            </summary>
        </member>
        <member name="P:iCal.IEvaluator.EvaluationStartBounds">
            <summary>
            The start bounds of the evaluation.  This gives
            the first date/time that is covered by the evaluation.
            This together with EvaluationEndBounds determines
            what time frames have already been evaluated, so
            duplicate evaluation doesn't occur.
            </summary>
        </member>
        <member name="P:iCal.IEvaluator.EvaluationEndBounds">
            <summary>
            The end bounds of the evaluation.
            See <see cref="P:iCal.IEvaluator.EvaluationStartBounds"/> for more info.
            </summary>
        </member>
        <member name="P:iCal.IEvaluator.Periods">
            <summary>
            Gets a list of periods collected so far during
            the evaluation process.
            </summary>
        </member>
        <member name="P:iCal.IEvaluator.AssociatedObject">
            <summary>
            Gets the object associated with this evaluator.
            </summary>
        </member>
        <member name="M:iCal.RecurringEvaluator.EvaluateRRule(iCal.IDateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Evaulates the RRule component, and adds each specified Period
            to the <see cref="T:iCal.PeriodList"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:iCal.RecurringEvaluator.EvaluateRDate(iCal.IDateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalates the RDate component, and adds each specified DateTime or
            Period to the <see cref="T:iCal.PeriodList"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:iCal.RecurringEvaluator.EvaluateExRule(iCal.IDateTime,System.DateTime,System.DateTime)">
            <summary>
            Evaulates the ExRule component, and excludes each specified DateTime
            from the <see cref="T:iCal.PeriodList"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="M:iCal.RecurringEvaluator.EvaluateExDate(iCal.IDateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalates the ExDate component, and excludes each specified DateTime or
            Period from the <see cref="T:iCal.PeriodList"/> collection.
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
        </member>
        <member name="T:iCal.Alarm">
            <summary>
            A class that represents an RFC 2445 VALARM component.
            FIXME: move GetOccurrences() logic into an AlarmEvaluator.
            </summary>    
        </member>
        <member name="M:iCal.IAlarm.GetOccurrences(iCal.IRecurringComponent,iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Gets a list of alarm occurrences for the given recurring component, <paramref name="rc"/>
            that occur between <paramref name="FromDate"/> and <paramref name="ToDate"/>.
            </summary>
        </member>
        <member name="M:iCal.IAlarm.Poll(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Polls the <see cref="T:iCal.Alarm"/> component for alarms that have been triggered
            since the provided <paramref name="Start"/> date/time.  If <paramref name="Start"/>
            is null, all triggered alarms will be returned.
            </summary>
            <param name="Start">The earliest date/time to poll trigerred alarms for.</param>
            <param name="End">The latest date/time to poll trigerred alarms for.</param>
            <returns>A list of <see cref="T:iCal.AlarmOccurrence"/> objects, each containing a triggered alarm.</returns>
        </member>
        <member name="M:iCal.Alarm.GetOccurrences(iCal.IRecurringComponent,iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Gets a list of alarm occurrences for the given recurring component, <paramref name="rc"/>
            that occur between <paramref name="FromDate"/> and <paramref name="ToDate"/>.
            </summary>
        </member>
        <member name="M:iCal.Alarm.Poll(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Polls the <see cref="T:iCal.Alarm"/> component for alarms that have been triggered
            since the provided <paramref name="Start"/> date/time.  If <paramref name="Start"/>
            is null, all triggered alarms will be returned.
            </summary>
            <param name="Start">The earliest date/time to poll trigerred alarms for.</param>
            <returns>A list of <see cref="T:iCal.AlarmOccurrence"/> objects, each containing a triggered alarm.</returns>
        </member>
        <member name="M:iCal.Alarm.AddRepeatedItems">
            <summary>
            Handles the repetitions that occur from the <c>REPEAT</c> and
            <c>DURATION</c> properties.  Each recurrence of the alarm will
            have its own set of generated repetitions.
            </summary>
        </member>
        <member name="T:antlr.TokenWithIndex">
            <summary>
            This token tracks it's own index 0..n-1 relative to the beginning 
            of the stream. It is designed to work with 
            <see cref="T:antlr.TokenStreamRewriteEngine"/> in TokenStreamRewriteEngine.cs
            </summary> 
        </member>
        <member name="T:antlr.IToken">
            <summary>
            A token is minimally a token type.  Subclasses can add the text matched
            for the token and line info. 
            </summary>
        </member>
        <member name="M:antlr.CommonToken.CommonTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonToken.CommonTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="F:antlr.TokenWithIndex.index">
            <summary>
            Index into token array indicating position in input stream
            </summary>
        </member>
        <member name="T:vCards.vCardWebsiteTypes">
            <summary>
                The type or classification of a web site.
            </summary>
            <remarks>
                <para>
                    The Microsoft Outlook contact editor has a field for
                    entering a web site.  The default classification of
                    this web site is work-related.  A personal web site
                    can be viewed or entered through the All Fields tab.
                </para>
            </remarks>
        </member>
        <member name="F:vCards.vCardWebsiteTypes.Default">
            <summary>
                No web site designation.
            </summary>
        </member>
        <member name="F:vCards.vCardWebsiteTypes.Personal">
            <summary>
                A personal home page.
            </summary>
        </member>
        <member name="F:vCards.vCardWebsiteTypes.Work">
            <summary>
                A work-related web site.
            </summary>
        </member>
        <member name="T:vCards.vCardProperty">
            <summary>
                A property of a <see cref="T:vCards.vCard"/>.
            </summary>
            <remarks>
                <para>
                    A vCard property specifies a single piece of information,
                    such as an email address or telephone number.  A property
                    can also specify meta-data like a revision number.  A full
                    vCards is basically a collection of properties structured
                    into a computer-friendly text format.
                </para>
                <para>
                    A property has a name, a value, and optionally one or
                    more subproperties.  A subproperty provides additional
                    information about the property (such as the encoding 
                    used to store the value).  The format of a value 
                    depends on the property and in some cases may be broken
                    into multiple values.
                </para>
            </remarks>
            <seealso cref="T:vCards.vCardPropertyCollection"/>
        </member>
        <member name="M:vCards.vCardProperty.#ctor">
            <summary>
                Creates a blank <see cref="T:vCards.vCardProperty"/> object.
            </summary>
        </member>
        <member name="M:vCards.vCardProperty.#ctor(System.String)">
            <summary>
                Creates a <see cref="T:vCards.vCardProperty"/> object
                with the specified name and a null value.
            </summary>
            <param name="name">
                The name of the property.
            </param>
        </member>
        <member name="M:vCards.vCardProperty.#ctor(System.String,System.String)">
            <summary>
                Creates a <see cref="T:vCards.vCardProperty"/> object with the
                specified name and value.
            </summary>
            <remarks>
                The vCard specification supports multiple values in
                certain fields, such as the N field.  The value specified
                in this constructor is loaded as the first value.
            </remarks>
        </member>
        <member name="M:vCards.vCardProperty.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a vCardProperty with the specified
                name, value and group.
            </summary>
            <param name="name">
                The name of the vCard property.
            </param>
            <param name="value">
                The value of the vCard property.
            </param>
            <param name="group">
                The group name of the vCard property.
            </param>
        </member>
        <member name="M:vCards.vCardProperty.#ctor(System.String,System.Byte[])">
            <summary>
                Creates a <see cref="T:vCards.vCardProperty"/> with the
                specified name and a byte array as a value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value as a byte array.</param>
        </member>
        <member name="M:vCards.vCardProperty.#ctor(System.String,System.DateTime)">
            <summary>
                Creates a <see cref="T:vCards.vCardProperty"/> with
                the specified name and date/time as a value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The date/time value.</param>
        </member>
        <member name="M:vCards.vCardProperty.#ctor(System.String,vCards.vCardValueCollection)">
            <summary>
                Initializes the vCard property with the specified
                name and values.
            </summary>
        </member>
        <member name="M:vCards.vCardProperty.ToString">
            <summary>
                Returns the value of the property as a string.
            </summary>
        </member>
        <member name="P:vCards.vCardProperty.Group">
            <summary>
                The group name of the property.
            </summary>
        </member>
        <member name="P:vCards.vCardProperty.Language">
            <summary>
                The language code of the property.
            </summary>
        </member>
        <member name="P:vCards.vCardProperty.Name">
            <summary>
                The name of the property (e.g. TEL).
            </summary>
        </member>
        <member name="P:vCards.vCardProperty.Subproperties">
            <summary>
                Subproperties of the vCard property, not including
                the name, encoding, and character set.
            </summary>
        </member>
        <member name="P:vCards.vCardProperty.Value">
            <summary>
                The value of the property.
            </summary>
        </member>
        <member name="T:vCards.vCardPhone">
            <summary>
                Telephone information for a <see cref="T:vCards.vCard"/>.
            </summary>
            <seealso cref="T:vCards.vCardPhoneCollection"/>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="M:vCards.vCardPhone.#ctor">
            <summary>
                Creates a new <see cref="T:vCards.vCardPhone"/> object.
            </summary>
        </member>
        <member name="M:vCards.vCardPhone.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:vCards.vCardPhone"/> object with the specified number.
            </summary>
            <param name="fullNumber">
                The phone number.
            </param>
        </member>
        <member name="M:vCards.vCardPhone.#ctor(System.String,vCards.vCardPhoneTypes)">
            <summary>
                Creates a new <see cref="T:vCards.vCardPhone"/> with the specified number and subtype.
            </summary>
            <param name="fullNumber">The phone number.</param>
            <param name="phoneType">The phone subtype.</param>
        </member>
        <member name="P:vCards.vCardPhone.FullNumber">
            <summary>
                The full telephone number.
            </summary>
        </member>
        <member name="P:vCards.vCardPhone.IsBBS">
            <summary>
                Indicates a BBS number.
            </summary>
            <seealso cref="P:vCards.vCardPhone.IsModem"/>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsCar">
            <summary>
                Indicates a car number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsCellular">
            <summary>
                Indicates a cellular number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsFax">
            <summary>
                Indicates a fax number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsHome">
            <summary>
                Indicates a home number.
            </summary>
            <seealso cref="P:vCards.vCardPhone.IsWork"/>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsISDN">
            <summary>
                Indicates an ISDN number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsMessagingService">
            <summary>
                Indicates a messaging service number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsModem">
            <summary>
                Indicates a modem number.
            </summary>
            <seealso cref="P:vCards.vCardPhone.IsBBS"/>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsPager">
            <summary>
                Indicates a pager number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsPreferred">
            <summary>
                Indicates a preferred number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsVideo">
            <summary>
                Indicates a video number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsVoice">
            <summary>
                Indicates a voice number.
            </summary>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.IsWork">
            <summary>
                Indicates a work number.
            </summary>
            <seealso cref="P:vCards.vCardPhone.IsHome"/>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="P:vCards.vCardPhone.PhoneType">
            <summary>
                The phone subtype.
            </summary>
            <seealso cref="P:vCards.vCardPhone.IsVideo"/>
            <seealso cref="P:vCards.vCardPhone.IsVoice"/>
            <seealso cref="P:vCards.vCardPhone.IsWork"/>
        </member>
        <member name="T:vCards.vCardCertificate">
            <summary>
                A certificate attached to a vCard.
            </summary>
            <remarks>
                <para>
                    A vCard can be associated with a public key or
                    authentication certificate.  This is typically
                    a public X509 certificate that allows people to
                    use the key for validating messages.
                </para>
            </remarks>
        </member>
        <member name="M:vCards.vCardCertificate.#ctor">
            <summary>
                Creates a new instance of the <see cref="T:vCards.vCardCertificate"/> class.
            </summary>
        </member>
        <member name="M:vCards.vCardCertificate.#ctor(System.String,System.Byte[])">
            <summary>
                Creates a new instance of the <see cref="T:vCards.vCardCertificate"/>
                class using the specified key type and raw certificate data.
            </summary>
            <param name="keyType">
                A string that identifies the type of certificate,
                such as X509.
            </param>
            <param name="data">
                The raw certificate data stored as a byte array.
            </param>
        </member>
        <member name="M:vCards.vCardCertificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
                Creates a vCard certificate based on an X509 certificate.
            </summary>
            <param name="x509">
                An initialized X509 certificate.
            </param>
        </member>
        <member name="P:vCards.vCardCertificate.Data">
            <summary>
                The raw data of the certificate as a byte array.
            </summary>
            <remarks>
                Most certificates consist of 8-bit binary data
                that is encoded into a text format using BASE64
                or a similar system.  This property provides
                access to the computer-friendly, decoded data.
            </remarks>
        </member>
        <member name="P:vCards.vCardCertificate.KeyType">
            <summary>
                A short string that identifies the type of certificate.
            </summary>
            <remarks>
                The most common type is X509.
            </remarks>
        </member>
        <member name="T:iCal.Todo">
            <summary>
            A class that represents an RFC 5545 VTODO component.
            </summary> 
        </member>
        <member name="M:iCal.ITodo.IsCompleted(iCal.IDateTime)">
            <summary>
            Use this method to determine if a todo item has been completed.
            This takes into account recurrence items and the previous date
            of completion, if any.        
            <note>
            This method evaluates the recurrence pattern for this TODO
            as necessary to ensure all relevant information is taken
            into account to give the most accurate result possible.
            </note>
            </summary>
            <param name="DateTime">The date and time to test.</param>
            <returns>True if the todo item has been completed</returns>
        </member>
        <member name="M:iCal.ITodo.IsActive(iCal.IDateTime)">
            <summary>
            Returns 'True' if the todo item is Active as of <paramref name="currDt"/>.
            An item is Active if it requires action of some sort.
            </summary>
            <param name="currDt">The date and time to test.</param>
            <returns>True if the item is Active as of <paramref name="currDt"/>, False otherwise.</returns>
        </member>
        <member name="M:iCal.ITodo.IsCancelled">
            <summary>
            Returns True if the todo item was cancelled.
            </summary>
            <returns>True if the todo was cancelled, False otherwise.</returns>
        </member>
        <member name="P:iCal.ITodo.Completed">
            <summary>
            The date/time the todo was completed.
            </summary>
        </member>
        <member name="P:iCal.ITodo.Due">
            <summary>
            The due date of the todo item.
            </summary>
        </member>
        <member name="P:iCal.ITodo.Duration">
            <summary>
            The duration of the todo item.
            </summary>
        </member>
        <member name="P:iCal.ITodo.GeographicLocation">
            <summary>
            The geographic location (lat/long) of the todo item.
            </summary>
        </member>
        <member name="P:iCal.ITodo.Location">
            <summary>
            The location of the todo item.
            </summary>
        </member>
        <member name="P:iCal.ITodo.PercentComplete">
            <summary>
            A number between 0 and 100 that represents
            the percentage of completion of this item.
            </summary>
        </member>
        <member name="P:iCal.ITodo.Resources">
            <summary>
            A list of resources associated with this todo item.
            </summary>
        </member>
        <member name="P:iCal.ITodo.Status">
            <summary>
            The current status of the todo item.
            </summary>
        </member>
        <member name="M:iCal.Todo.IsCompleted(iCal.IDateTime)">
            <summary>
            Use this method to determine if a todo item has been completed.
            This takes into account recurrence items and the previous date
            of completion, if any.        
            <note>
            This method evaluates the recurrence pattern for this TODO
            as necessary to ensure all relevant information is taken
            into account to give the most accurate result possible.
            </note>
            </summary>
            <param name="DateTime">The date and time to test.</param>
            <returns>True if the todo item has been completed</returns>
        </member>
        <member name="M:iCal.Todo.IsActive(iCal.IDateTime)">
            <summary>
            Returns 'True' if the todo item is Active as of <paramref name="currDt"/>.
            An item is Active if it requires action of some sort.
            </summary>
            <param name="currDt">The date and time to test.</param>
            <returns>True if the item is Active as of <paramref name="currDt"/>, False otherwise.</returns>
        </member>
        <member name="M:iCal.Todo.IsCancelled">
            <summary>
            Returns True if the todo item was cancelled.
            </summary>
            <returns>True if the todo was cancelled, False otherwise.</returns>
        </member>
        <member name="P:iCal.Todo.Completed">
            <summary>
            The date/time the todo was completed.
            </summary>
        </member>
        <member name="P:iCal.Todo.DTStart">
            <summary>
            The start date/time of the todo item.
            </summary>
        </member>
        <member name="P:iCal.Todo.Due">
            <summary>
            The due date of the todo item.
            </summary>
        </member>
        <member name="P:iCal.Todo.Duration">
            <summary>
            The duration of the todo item.
            </summary>
        </member>
        <member name="P:iCal.Todo.Status">
            <summary>
            The status of the todo item.
            </summary>
        </member>
        <member name="T:antlr.debug.SyntacticPredicateListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.SyntacticPredicateListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.SyntacticPredicateListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateFailed(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredFailed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateStarted(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredStarted" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateSucceeded(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:antlr.debug.MessageListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.MessageListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.MessageListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.MessageListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.MessageListenerBase.reportError(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportError" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.MessageListenerBase.reportWarning(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportWarning" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:antlr.debug.DebuggingParser">
            <summary> This type was created in VisualAge.
            </summary>
        </member>
        <member name="M:antlr.debug.DebuggingCharScanner.reportError(antlr.MismatchedCharException)">
            <summary>Report exception errors caught in nextToken() 
            </summary>
        </member>
        <member name="M:antlr.debug.DebuggingCharScanner.reportError(System.String)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.DebuggingCharScanner.reportWarning(System.String)">
            <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="T:vCards.vCardSubproperty">
            <summary>
                A subproperty of a vCard property.
            </summary>
            <remarks>
                <para>
                    A vCard is fundamentally a set of properties in NAME:VALUE
                    format, where the name is a keyword like "EMAIL" and the 
                    value is a string appropriate for the keyword (e.g. an email
                    address for the EMAIL property, or a BASE64 encoded image
                    for the PHOTO property).
                </para>
                <para>
                    All vCard properties support subproperties.  These can
                    be global options like encoding or value type, or might be
                    options specific to the keyword.  For example, all vCard
                    properties can have an encoding subproperty that identifies
                    the text encoding of the value.  A phone property, however,
                    supports special properties that identify the type and purpose
                    of the phone.
                </para>
                <para>
                    A subproperty is not required to have a value.  In such a case
                    the subproperty acts like a flag.  For example, the TEL
                    property of the vCard specification is used to indicate a 
                    telephone number associated with the person.  This property
                    supports a subproperty called BBS, which indicates the telephone
                    number is for a dial-up bulletin board system.  The BBS
                    subproperty does not need a value; the existance of the BBS
                    subproperty is sufficient to indicate the telephone number is
                    for a BBS system.
                </para>
            </remarks>
        </member>
        <member name="F:vCards.vCardSubproperty.name">
            <summary>
                Stores the name of the subproperty.
            </summary>
        </member>
        <member name="F:vCards.vCardSubproperty.value">
            <summary>
                Stores the value of the subproperty.  This can be null.
            </summary>
        </member>
        <member name="M:vCards.vCardSubproperty.#ctor(System.String)">
            <summary>
                Creates a subproperty with the specified
                name and no value.
            </summary>
            <param name="name">
                The name of the subproperty.
            </param>
        </member>
        <member name="M:vCards.vCardSubproperty.#ctor(System.String,System.String)">
            <summary>
                Creates a subproperty with the specified
                name and value.
            </summary>
            <param name="name">
                The name of the subproperty.
            </param>
            <param name="value">
                The value of the subproperty.  This can be null.
            </param>
        </member>
        <member name="P:vCards.vCardSubproperty.Name">
            <summary>
                The name of the subproperty.
            </summary>
        </member>
        <member name="P:vCards.vCardSubproperty.Value">
            <summary>
                The optional value of the subproperty.
            </summary>
        </member>
        <member name="T:vCards.vCardStandardWriterOptions">
            <summary>
                Extended options for the <see cref="T:vCards.vCardStandardWriter"/> class.
            </summary>
        </member>
        <member name="F:vCards.vCardStandardWriterOptions.None">
            <summary>
                No options.
            </summary>
        </member>
        <member name="F:vCards.vCardStandardWriterOptions.IgnoreCommas">
            <summary>
                Indicates whether or not commas should be escaped in values.
            </summary>
            <remarks>
                The vCard specification requires that commas be escaped
                in values (e.g. a "," is translated to "\,").  However, Microsoft
                Outlook(tm) does not properly decode these escaped commas.  This
                option instruct the writer to ignored (not translate) embedded
                commas for better compatibility with Outlook.
            </remarks>
        </member>
        <member name="T:vCards.vCardPhoneTypes">
            <summary>
                Identifies different phone types (e.g. Fax, BBS, etc).
            </summary>
            <seealso cref="T:vCards.vCardPhone"/>
            <seealso cref="T:vCards.vCardPhoneCollection"/>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Default">
            <summary>
                Indicates default properties.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.BBS">
            <summary>
                Indicates a bulletin board system.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Car">
            <summary>
                Indicates a car phone.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Cellular">
            <summary>
                Indicates a cell phone.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.CellularVoice">
            <summary>
                Indicates a celluar voice number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Fax">
            <summary>
                Indicates a facsimile number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Home">
            <summary>
                Indicates a home number
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.HomeVoice">
            <summary>
                Indicates a home and voice number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.ISDN">
            <summary>
                Indicates an ISDN number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.MessagingService">
            <summary>
                Indicates a messaging service on the number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Modem">
            <summary>
                Indicates a MODEM number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Pager">
            <summary>
                Indicates a pager number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Preferred">
            <summary>
                Indicates a preferred number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Video">
            <summary>
                Indicates a video number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Voice">
            <summary>
                Indicates a voice number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.Work">
            <summary>
                Indicates a work number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.WorkFax">
            <summary>
                Indicates a work fax number.
            </summary>
        </member>
        <member name="F:vCards.vCardPhoneTypes.WorkVoice">
            <summary>
                Indicates a work and voice number.
            </summary>
        </member>
        <member name="T:vCards.vCardPhoneCollection">
            <summary>
                A generic collection <see cref="T:vCards.vCardPhone"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardPhone"/>
            <seealso cref="T:vCards.vCardPhoneTypes"/>
        </member>
        <member name="M:vCards.vCardPhoneCollection.GetFirstChoice(vCards.vCardPhoneTypes)">
            <summary>
                Looks for the first phone of the specified
                type that is a preferred phone.
            </summary>
            <param name="phoneType">
                The type of phone to seek.
            </param>
            <returns>
                The first <see cref="T:vCards.vCardPhone"/> that matches
                the specified type.  A preferred number is returned
                before a non-preferred number.
            </returns>
        </member>
        <member name="T:vCards.vCardEmailAddressCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardEmailAddress"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardEmailAddress"/>
            <seealso cref="T:vCards.vCardEmailAddressType"/>
        </member>
        <member name="M:vCards.vCardEmailAddressCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:vCards.vCardEmailAddressCollection"/>.
            </summary>
        </member>
        <member name="M:vCards.vCardEmailAddressCollection.GetFirstChoice(vCards.vCardEmailAddressType)">
            <summary>
                Locates the first email address of the specified type while 
                giving preference to email addresses marked as preferred.
            </summary>
            <param name="emailType">
                The type of email address to locate.  This can be any 
                combination of values from <see cref="T:vCards.vCardEmailAddressType"/>.
            </param>
            <returns>
                The function returns the first preferred email address that matches
                the specified type.  If the collection does not contain a preferred
                email address, then it will return the first non-preferred matching
                email address.  The function returns null if no matches were found.
            </returns>
        </member>
        <member name="T:vCards.vCardAccessClassification">
            <summary>
                The access classification of a vCard.
            </summary>
            <remarks>
                The access classification defines the intent of the vCard owner.
            </remarks>
        </member>
        <member name="F:vCards.vCardAccessClassification.Unknown">
            <summary>
                The vCard classification is unknown.
            </summary>
        </member>
        <member name="F:vCards.vCardAccessClassification.Public">
            <summary>
                The vCard is classified as public.
            </summary>
        </member>
        <member name="F:vCards.vCardAccessClassification.Private">
            <summary>
                The vCard is classified as private.
            </summary>
        </member>
        <member name="F:vCards.vCardAccessClassification.Confidential">
            <summary>
                The vCard is classified as confidential.
            </summary>
        </member>
        <member name="P:iCal.Serialization.SerializationContext.Default">
            <summary>
            Gets the Singleton instance of the SerializationContext class.
            </summary>
        </member>
        <member name="M:iCal.Serialization.iCalendar.SerializerFactory.Build(System.Type,iCal.Serialization.ISerializationContext)">
            <summary>
            Returns a serializer that can be used to serialize and object
            of type <paramref name="objectType"/>.
            <note>
                TODO: Add support for caching.
            </note>
            </summary>
            <param name="objectType">The type of object to be serialized.</param>
            <param name="ctx">The serialization context.</param>
        </member>
        <member name="T:iCal.CalendarComponentCompositeList`1">
            <summary>
            This class works similar to the CalendarPropertyCompositeList class,
            but works with components instead of properties.
            
            It consolidates components of a given name into a list,
            and allows you to work with directly against the
            components themselves.  This preserves the notion that our components
            are still stored directly within the calendar object, but gives
            us the flexibility to work with multiple components through a
            single (composite) list.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iCal.KeyedList`2" -->
        <member name="M:iCal.KeyedList`2.ContainsKey(`1)">
            <summary>
            Returns true if the list contains at least one 
            object with a matching key, false otherwise.
            </summary>
        </member>
        <member name="M:iCal.KeyedList`2.IndexOf(`1)">
            <summary>
            Returns the index of the first object
            with the matching key.
            </summary>
        </member>
        <member name="T:iCal.WeekDay">
            <summary>
            Represents an RFC 5545 "BYDAY" value.
            </summary>
        </member>
        <member name="M:antlr.TreeParser.panic">
            <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
            
        </member>
        <member name="M:antlr.ParseTreeRule.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
            <summary>
            Do a step-first walk, building up a buffer of tokens until
            you've reached a particular step and print out any rule subroots
            insteads of descending.
            </summary>
            <param name="buf">derivation buffer</param>
            <param name="step">derivation steps</param>
            <returns></returns>
        </member>
        <member name="T:vCards.vCardWebsite">
            <summary>
                A web site defined in a vCard.
            </summary>
            <seealso cref="T:vCards.vCardWebsiteCollection"/>
            <seealso cref="T:vCards.vCardWebsiteTypes"/>
        </member>
        <member name="M:vCards.vCardWebsite.#ctor">
            <summary>
                Creates a vCardWebSite object.
            </summary>
        </member>
        <member name="M:vCards.vCardWebsite.#ctor(System.String)">
            <summary>
                Creates a new vCardWebSite object with the specified URL.
            </summary>
            <param name="url">
                The URL of the web site.
            </param>
        </member>
        <member name="M:vCards.vCardWebsite.#ctor(System.String,vCards.vCardWebsiteTypes)">
            <summary>
                Creates a new vCardWebSite with the
                specified URL and classification.
            </summary>
            <param name="url">
                The URL of the web site.
            </param>
            <param name="websiteType">
                The classification of the web site.
            </param>
        </member>
        <member name="M:vCards.vCardWebsite.ToString">
            <summary>
                Returns the string representation (URL) of the web site.
            </summary>
            <returns>
                The URL of the web site.
            </returns>
        </member>
        <member name="P:vCards.vCardWebsite.IsPersonalSite">
            <summary>
                Indicates a personal home page.
            </summary>
        </member>
        <member name="P:vCards.vCardWebsite.IsWorkSite">
            <summary>
                Indicates a work-related web site.
            </summary>
        </member>
        <member name="P:vCards.vCardWebsite.Url">
            <summary>
                The URL of the web site.
            </summary>
            <remarks>
                The format of the URL is not validated.
            </remarks>
        </member>
        <member name="P:vCards.vCardWebsite.WebsiteType">
            <summary>
                The type of web site (e.g. home page, work, etc).
            </summary>
        </member>
        <member name="T:vCards.vCardSourceCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardSource"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardSource"/>
        </member>
        <member name="M:vCards.vCardSourceCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:vCards.vCardSourceCollection"/>.
            </summary>
        </member>
        <member name="T:vCards.vCardDeliveryAddressTypes">
            <summary>
                The type of a delivery address.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.Default">
            <summary>
                Default address settings.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.Domestic">
            <summary>
                A domestic delivery address.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.International">
            <summary>
                An international delivery address.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.Postal">
            <summary>
                A postal delivery address.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.Parcel">
            <summary>
                A parcel delivery address.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.Home">
            <summary>
                A home delivery address.
            </summary>
        </member>
        <member name="F:vCards.vCardDeliveryAddressTypes.Work">
            <summary>
                A work delivery address.
            </summary>
        </member>
        <member name="T:vCards.vCardCollection">
            <summary>
                A generic collection of <see cref="T:vCards.vCard"/> objects.
            </summary>
        </member>
        <member name="M:iCal.IGetOccurrencesTyped.GetOccurrences``1(iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start on the date provided.
            All components starting between 12:00:00AM and 11:59:59 PM will be
            returned.
            <note>
            This will first Evaluate() the date range required in order to
            determine the occurrences for the date provided, and then return
            the occurrences.
            </note>
            </summary>
            <param name="dt">The date for which to return occurrences.</param>
            <returns>A list of Periods representing the occurrences of this object.</returns>
        </member>
        <member name="M:iCal.IGetOccurrencesTyped.GetOccurrences``1(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start within the date range provided.
            All components occurring between <paramref name="startTime"/> and <paramref name="endTime"/>
            will be returned.
            </summary>
            <param name="startTime">The starting date range</param>
            <param name="endTime">The ending date range</param>
        </member>
        <member name="T:iCal.FilteredCalendarObjectList`1">
            <summary>
            A collection of iCalendar components.  This class is used by the 
            <see cref="T:iCal.iCalendar"/> class to maintain a collection of events,
            to-do items, journal entries, and free/busy times.
            </summary>
        </member>
        <member name="T:iCal.UTCOffset">
            <summary>
            Represents a time offset from UTC (Coordinated Universal Time).
            </summary>
        </member>
        <member name="T:antlr.ASTVisitor">
            <summary>
            Summary description for ASTVisitor.
            </summary>
        </member>
        <member name="T:antlr.debug.TraceListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.TraceListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.TraceListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.TraceListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.TraceListenerBase.enterRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "EnterRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.TraceListenerBase.exitRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "ExitRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="F:antlr.debug.ANTLREventArgs.type_">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="M:antlr.debug.GuessingEventArgs.setValues(System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="M:antlr.debug.SemanticPredicateEventArgs.setValues(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:vCards.vCardValueCollection">
            <summary>
                A collection of string values.
            </summary>
        </member>
        <member name="M:vCards.vCardValueCollection.#ctor">
            <summary>
                Initializes an empty <see cref="T:vCards.vCardValueCollection"/>.
            </summary>
        </member>
        <member name="M:vCards.vCardValueCollection.#ctor(System.Char)">
            <summary>
                Initializes the value collection with the specified separator.
            </summary>
            <param name="separator">
                The suggested character to use as a separator when
                writing the collection as a string.
            </param>
        </member>
        <member name="M:vCards.vCardValueCollection.Add(System.Collections.Specialized.StringCollection)">
            <summary>
                Adds the contents of a StringCollection to the collection.
            </summary>
            <param name="values">
                An initialized StringCollection containing zero or more values.
            </param>
        </member>
        <member name="P:vCards.vCardValueCollection.Separator">
            <summary>
                The suggested separator when writing values to a string.
            </summary>
        </member>
        <member name="T:vCards.vCardDeliveryLabel">
            <summary>
                A formatted delivery label.
            </summary>
            <seealso cref="T:vCards.vCardDeliveryAddress"/>
            <seealso cref="T:vCards.vCardDeliveryLabelCollection"/>
        </member>
        <member name="M:vCards.vCardDeliveryLabel.#ctor">
            <summary>
                Initializes a new <see cref="T:vCards.vCardDeliveryLabel"/>.
            </summary>
        </member>
        <member name="M:vCards.vCardDeliveryLabel.#ctor(System.String)">
            <summary>
                Initializes a new <see cref="T:vCards.vCardDeliveryLabel"/> to
                the specified text.
            </summary>
            <param name="text">
                The formatted text of a delivery label.  The label 
                may contain carriage returns, line feeds, and other
                control characters.
            </param>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.AddressType">
            <summary>
                The type of delivery address for the label.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.IsDomestic">
            <summary>
                Indicates a domestic delivery address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.IsHome">
            <summary>
                Indicates a home address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.IsInternational">
            <summary>
                Indicates an international address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.IsParcel">
            <summary>
                Indicates a parcel delivery address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.IsPostal">
            <summary>
                Indicates a postal address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.IsWork">
            <summary>
                Indicates a work address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryLabel.Text">
            <summary>
                The formatted delivery text.
            </summary>
        </member>
        <member name="M:iCal.TextUtil.RemoveEmptyLines(System.String)">
            <summary>
            Removes blank lines from a string with normalized (\r\n)
            line endings.
            NOTE: this method makes the line/col numbers output from
            antlr incorrect.
            </summary>
        </member>
        <member name="M:iCal.TextUtil.Normalize(System.String,iCal.Serialization.ISerializationContext)">
            <summary>
            Normalizes line endings, converting "\r" into "\r\n" and "\n" into "\r\n".        
            </summary>
        </member>
        <member name="M:iCal.TextUtil.UnwrapLines(System.String)">
            <summary>
            Unwraps lines from the RFC 2445 "line folding" technique.
            NOTE: this method makes the line/col numbers output from
            antlr incorrect.
            </summary>
        </member>
        <member name="M:iCal.IICalendar.Create``1">
            <summary>
            Creates a new component, and adds it
            to the calendar.
            </summary>
        </member>
        <member name="M:iCal.IICalendar.GetTimeZone(System.String)">
            <summary>
            Returns the time zone object that corresponds
            to the provided TZID, or null of no matching
            time zone could be found.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.Version">
            <summary>
            Gets/sets the calendar version.  Defaults to "2.0".
            </summary>
        </member>
        <member name="P:iCal.IICalendar.ProductID">
            <summary>
            Gets/sets the product ID for the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.Scale">
            <summary>
            Gets/sets the scale of the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.Method">
            <summary>
            Gets/sets the calendar method.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.RecurrenceRestriction">
            <summary>
            Gets/sets the restriction on how evaluation of 
            recurrence patterns occurs within this calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.RecurrenceEvaluationMode">
            <summary>
            Gets/sets the evaluation mode during recurrence
            evaluation.  Default is ThrowException.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.UniqueComponents">
            <summary>
            Gets a list of unique components contained in the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.Events">
            <summary>
            Gets a list of Events contained in the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.FreeBusy">
            <summary>
            Gets a list of Free/Busy components contained in the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.Journals">
            <summary>
            Gets a list of Journal entries contained in the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.TimeZones">
            <summary>
            Gets a list of time zones contained in the calendar.
            </summary>
        </member>
        <member name="P:iCal.IICalendar.Todos">
            <summary>
            Gets a list of To-do items contained in the calendar.
            </summary>
        </member>
        <member name="M:iCal.IAttachment.LoadDataFromUri">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="P:iCal.IAttachment.Uri"/>.
            </summary>
        </member>
        <member name="M:iCal.IAttachment.LoadDataFromUri(System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="P:iCal.IAttachment.Uri"/>.
            </summary>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="M:iCal.IAttachment.LoadDataFromUri(System.Uri,System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="P:iCal.IAttachment.Uri"/>.
            </summary>
            <param name="uri">The Uri from which to download the <c>Data</c></param>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="P:iCal.IAttachment.Uri">
            <summary>
            The URI where the attachment information can be located.
            </summary>
        </member>
        <member name="P:iCal.IAttachment.Data">
            <summary>
            A binary representation of the data that was loaded.
            </summary>
        </member>
        <member name="P:iCal.IAttachment.Value">
            <summary>
            A unicode-encoded version of the data that was loaded.
            </summary>
        </member>
        <member name="P:iCal.IAttachment.FormatType">
            <summary>
            To specify the content type of a referenced object.
            This optional value should be an IANA-registered
            MIME type, if specified.
            </summary>
        </member>
        <member name="P:iCal.IAttachment.ValueEncoding">
            <summary>
            Gets/sets the encoding used to store the value.
            </summary>
        </member>
        <member name="T:iCal.PeriodList">
            <summary>
            An iCalendar list of recurring dates (or date exclusions)
            </summary>
        </member>
        <member name="T:iCal.iCalTimeZoneInfo">
            <summary>
            A class that contains time zone information, and is usually accessed
            from an iCalendar object using the <see cref="M:iCal.iCalendar.GetTimeZone(System.String)"/> method.        
            </summary>
        </member>
        <member name="M:iCal.ITimeZoneInfo.GetObservance(iCal.IDateTime)">
            <summary>
            Returns the observance that corresponds to
            the date/time provided, or null if no matching
            observance could be found within this TimeZoneInfo.
            </summary>
        </member>
        <member name="M:iCal.ITimeZoneInfo.Contains(iCal.IDateTime)">
            <summary>
            Returns true if this time zone info represents
            the observed time zone for the IDateTime value
            provided.
            </summary>
        </member>
        <member name="P:iCal.iCalTimeZoneInfo.TimeZoneName">
            <summary>
            Returns the name of the current Time Zone.
            <example>
                The following are examples:
                <list type="bullet">
                    <item>EST</item>
                    <item>EDT</item>
                    <item>MST</item>
                    <item>MDT</item>
                </list>
            </example>
            </summary>
        </member>
        <member name="T:antlr.ASTNodeCreator">
            <summary>
            A creator of AST node instances.
            </summary>
            <remarks>
            <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of AST node objects.
            </para>
            <para>
            Parsers and TreeParsers already use the ASTFactory class in ANTLR whenever
            they need to create an AST node objeect. What this class does is to support
            performant extensibility of the basic ASTFactory. The ASTFactory can now be
            extnded as run-time to support more new AST node types without using needing
            to use reflection.
            </para>
            </remarks>
        </member>
        <member name="M:antlr.ASTNodeCreator.Create">
            <summary>
            Constructs an <see cref="T:antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:antlr.ASTNodeCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="T:antlr.debug.ParserListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.enterRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "EnterRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.exitRule(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "ExitRule" event
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserConsume(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "Consume" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserLA(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "ParserLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "Match" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMismatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatch" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.parserMismatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.reportError(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportError" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.reportWarning(System.Object,antlr.debug.MessageEventArgs)">
            <summary>
            Handle the "ReportWarning" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.semanticPredicateEvaluated(System.Object,antlr.debug.SemanticPredicateEventArgs)">
            <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateFailed(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredFailed" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateStarted(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredStarted" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateSucceeded(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
            <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.MessageEventArgs.setValues(System.Int32,System.String)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:vCards.vCardNoteCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardNote"/> objects.
            </summary>
        </member>
        <member name="M:vCards.vCardNoteCollection.#ctor">
            <summary>
               Initializes a new instance of the <see cref="T:vCards.vCardNoteCollection"/>.
            </summary>
        </member>
        <member name="M:vCards.vCardNoteCollection.Add(System.String)">
            <summary>
                Adds a new note to the collection.
            </summary>
            <param name="text">
                The text of the note.
            </param>
            <returns>
                The <see cref="T:vCards.vCardNote"/> object representing the note.
            </returns>
        </member>
        <member name="T:vCards.vCardException">
            <summary>
                Base class for <see cref="T:vCards.vCard"/>-specific exceptions.
            </summary>
        </member>
        <member name="M:vCards.vCardException.#ctor">
            <summary>
                Initializes a new instance of the vCardException class.
            </summary>
        </member>
        <member name="M:vCards.vCardException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the vCardException
                class with the specified error message.
            </summary>
            <param name="message">
                The message that describes the error.
            </param>
        </member>
        <member name="M:vCards.vCardException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the vCardException
                class with a specified error message and a reference
                to the inner exception that is the cause of the
                exception.
            </summary>
            <param name="message">
                The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
                The exception that is the cause of the current exception,
                or a null reference (Nothing in Visual Basic) if no
                inner exception is specified.
            </param>
        </member>
        <member name="T:vCards.vCardDeliveryAddress">
            <summary>
                A postal address.
            </summary>
            <seealso cref="T:vCards.vCardDeliveryAddressCollection"/>
        </member>
        <member name="M:vCards.vCardDeliveryAddress.#ctor">
            <summary>
                Creates a new delivery address object.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.AddressType">
            <summary>
                The type of postal address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.City">
            <summary>
                The city or locality of the address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.Country">
            <summary>
                The country name of the address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.IsDomestic">
            <summary>
                Indicates a domestic delivery address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.IsHome">
            <summary>
                Indicates a home address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.IsInternational">
            <summary>
                Indicates an international address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.IsParcel">
            <summary>
                Indicates a parcel delivery address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.IsPostal">
            <summary>
                Indicates a postal address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.IsWork">
            <summary>
                Indicates a work address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.PostalCode">
            <summary>
                The postal code (e.g. ZIP code) of the address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.Region">
            <summary>
                The region (state or province) of the address.
            </summary>
        </member>
        <member name="P:vCards.vCardDeliveryAddress.Street">
            <summary>
                The street of the delivery address.
            </summary>
        </member>
        <member name="M:antlr.Parser.panic">
            <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
            
        </member>
        <member name="M:antlr.Parser.setASTFactory(antlr.ASTFactory)">
            <summary>
            Specify an object with support code (shared by Parser and TreeParser.
            Normally, the programmer does not play with this, using 
            <see cref="M:antlr.Parser.setASTNodeClass(System.String)"/> instead.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:antlr.Parser.setASTNodeClass(System.String)">
            <summary>
            Specify the type of node to create during tree building. 
            </summary>
            <param name="cl">Fully qualified AST Node type name.</param>
        </member>
        <member name="M:antlr.Parser.setASTNodeType(System.String)">
            <summary>
            Specify the type of node to create during tree building. 
            use <see cref="M:antlr.Parser.setASTNodeClass(System.String)"/> now to be consistent with 
            Token Object Type accessor.
            </summary>
            <param name="nodeType">Fully qualified AST Node type name.</param>
        </member>
        <member name="E:antlr.Parser.EnterRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:iCal.IDateTime.ToTimeZone(iCal.ITimeZoneInfo)">
            <summary>
            Converts the date/time value to a local time
            within the specified time zone.
            </summary>
        </member>
        <member name="M:iCal.IDateTime.ToTimeZone(System.String)">
            <summary>
            Converts the date/time value to a local time
            within the specified time zone.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Local">
            <summary>
            Converts the date/time to this computer's local date/time.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.UTC">
            <summary>
            Converts the date/time to UTC (Coordinated Universal Time)
            </summary>
        </member>
        <member name="P:iCal.IDateTime.TimeZoneObservance">
            <summary>
            Retrieves the <see cref="T:iCal.iCalTimeZoneInfo"/> object for the time
            zone set by <see cref="P:iCal.ITimeZoneInfo.TZID"/>.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.IsUniversalTime">
            <summary>
            Gets/sets whether the Value of this date/time represents
            a universal time.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.TimeZoneName">
            <summary>
            Gets the time zone name this time is in, if it references a time zone.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Value">
            <summary>
            Gets/sets the underlying DateTime value stored.  This should always
            use DateTimeKind.Utc, regardless of its actual representation.
            Use IsUniversalTime along with the TZID to control how this
            date/time is handled.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.HasDate">
            <summary>
            Gets/sets whether or not this date/time value contains a 'date' part.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.HasTime">
            <summary>
            Gets/sets whether or not this date/time value contains a 'time' part.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.TZID">
            <summary>
            Gets/sets the time zone ID for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Year">
            <summary>
            Gets the year for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Month">
            <summary>
            Gets the month for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Day">
            <summary>
            Gets the day for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Hour">
            <summary>
            Gets the hour for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Minute">
            <summary>
            Gets the minute for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Second">
            <summary>
            Gets the second for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Millisecond">
            <summary>
            Gets the millisecond for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Ticks">
            <summary>
            Gets the ticks for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.DayOfWeek">
            <summary>
            Gets the DayOfWeek for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.DayOfYear">
            <summary>
            Gets the DayOfYear for this date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.Date">
            <summary>
            Gets the date portion of the date/time value.
            </summary>
        </member>
        <member name="P:iCal.IDateTime.TimeOfDay">
            <summary>
            Gets the time portion of the date/time value.
            </summary>
        </member>
        <member name="T:antlr.debug.ParserMatchListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserMatchListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserMatchListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "Match" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMismatch(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatch" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserMatchListenerBase.parserMismatchNot(System.Object,antlr.debug.MatchEventArgs)">
            <summary>
            Handle the "MisMatchNot" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.consume">
            <summary>Get another token object from the token stream 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.LA(System.Int32)">
            <summary>Return the token type of the ith token of lookahead where i=1
            is the current token being examined by the parser (i.e., it
            has not been matched yet).
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.match(System.Int32)">
            <summary>Make sure current lookahead symbol matches token type <tt>t</tt>.
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.match(antlr.collections.impl.BitSet)">
            <summary>Make sure current lookahead symbol matches the given set
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.reportError(antlr.RecognitionException)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.reportError(System.String)">
            <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.reportWarning(System.String)">
            <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
        </member>
        <member name="M:antlr.debug.LLkDebuggingParser.setupDebugging(antlr.TokenStream,antlr.TokenBuffer)">
            <summary>User can override to do their own debugging 
            </summary>
        </member>
        <member name="T:iCal.Trigger">
            <summary>
            A class that is used to specify exactly when an <see cref="T:iCal.Alarm"/> component will trigger.
            Usually this date/time is relative to the component to which the Alarm is associated.
            </summary>    
        </member>
        <member name="T:iCal.iCalDateTime">
            <summary>
            The iCalendar equivalent of the .NET <see cref="T:System.DateTime"/> class.
            <remarks>
            In addition to the features of the <see cref="T:System.DateTime"/> class, the <see cref="T:iCal.iCalDateTime"/>
            class handles time zone differences, and integrates seamlessly into
            the iCalendar framework.
            </remarks>
            </summary>
        </member>
        <member name="P:iCal.iCalDateTime.Local">
            <summary>
            Converts the date/time to this computer's local date/time.
            </summary>
        </member>
        <member name="P:iCal.iCalDateTime.UTC">
            <summary>
            Converts the date/time to UTC (Coordinated Universal Time)
            </summary>
        </member>
        <member name="P:iCal.iCalDateTime.TimeZoneObservance">
            <summary>
            Gets the <see cref="T:iCal.iCalTimeZoneInfo"/> object for the time
            zone set by <see cref="P:iCal.ITimeZoneInfo.TZID"/>.
            </summary>
        </member>
        <member name="T:iCal.Attachment">
            <summary>
            A class to handle attachments, or URIs as attachments, within an iCalendar. 
            </summary>
        </member>
        <member name="M:iCal.Attachment.LoadDataFromUri">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="P:iCal.Attachment.Uri"/>.
            </summary>
        </member>
        <member name="M:iCal.Attachment.LoadDataFromUri(System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="P:iCal.Attachment.Uri"/>.
            </summary>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="M:iCal.Attachment.LoadDataFromUri(System.Uri,System.String,System.String)">
            <summary>
            Loads (fills) the <c>Data</c> property with the file designated
            at the given <see cref="P:iCal.Attachment.Uri"/>.
            </summary>
            <param name="uri">The Uri from which to download the <c>Data</c></param>
            <param name="username">The username to supply for credentials</param>
            <param name="password">The pasword to supply for credentials</param>
        </member>
        <member name="M:antlr.debug.TokenEventArgs.setValues(System.Int32,System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="M:iCal.EventEvaluator.Evaluate(iCal.IDateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Evaluates this event to determine the dates and times for which the event occurs.
            This method only evaluates events which occur between <paramref name="FromDate"/>
            and <paramref name="ToDate"/>; therefore, if you require a list of events which
            occur outside of this range, you must specify a <paramref name="FromDate"/> and
            <paramref name="ToDate"/> which encapsulate the date(s) of interest.
            <note type="caution">
                For events with very complex recurrence rules, this method may be a bottleneck
                during processing time, especially when this method in called for a large number
                of events, in sequence, or for a very large time span.
            </note>
            </summary>
            <param name="FromDate">The beginning date of the range to evaluate.</param>
            <param name="ToDate">The end date of the range to evaluate.</param>
            <returns></returns>
        </member>
        <member name="T:iCal.GeographicLocation">
            <summary>
            A class that represents the geographical location of an
            <see cref="T:iCal.Event"/> or <see cref="T:iCal.Todo"/> item.
            </summary>
        </member>
        <member name="T:iCal.iCalTimeZone">
            <summary>
            A class that represents an RFC 5545 VTIMEZONE component.
            </summary>
        </member>
        <member name="M:iCal.iCalTimeZone.GetTimeZoneObservance(iCal.IDateTime)">
            <summary>
            Retrieves the iCalTimeZoneInfo object that contains information
            about the TimeZone, with the name of the current timezone,
            offset from UTC, etc.
            </summary>
            <param name="dt">The iCalDateTime object for which to retrieve the iCalTimeZoneInfo.</param>
            <returns>A TimeZoneInfo object for the specified iCalDateTime</returns>
        </member>
        <member name="M:antlr.debug.TraceEventArgs.setValues(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:antlr.debug.ParserTokenListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserTokenListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserTokenListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParserTokenListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserTokenListenerBase.parserConsume(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "Consume" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.ParserTokenListenerBase.parserLA(System.Object,antlr.debug.TokenEventArgs)">
            <summary>
            Handle the "ParserLA" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:antlr.debug.ParserEventSupport">
            <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
        </member>
        <member name="T:vCards.vCardGender">
            <summary>
                The gender (male or female) of the contact.
            </summary>
            <remarks>
                <para>
                    Gender is not directly supported by the vCard specification.
                    It is recognized by Microsoft Outlook and the Windows Address
                    Book through an extended property called X-WAB-GENDER.  This
                    property has a value of 1 for women and 2 for men.
                </para>
            </remarks>
            <seealso cref="P:vCards.vCard.Gender"/>
        </member>
        <member name="F:vCards.vCardGender.Unknown">
            <summary>
                Unknown gender.
            </summary>
        </member>
        <member name="F:vCards.vCardGender.Female">
            <summary>
                Female gender.
            </summary>
        </member>
        <member name="F:vCards.vCardGender.Male">
            <summary>
                Male gender.
            </summary>
        </member>
        <member name="M:iCal.Serialization.iCalendar.DataTypeSerializerFactory.Build(System.Type,iCal.Serialization.ISerializationContext)">
            <summary>
            Returns a serializer that can be used to serialize and object
            of type <paramref name="objectType"/>.
            <note>
                TODO: Add support for caching.
            </note>
            </summary>
            <param name="objectType">The type of object to be serialized.</param>
            <param name="ctx">The serialization context.</param>
        </member>
        <member name="F:antlr.ByteBuffer.buf">
            <summary>
            Small buffer used to avoid reading individual chars
            </summary>
        </member>
        <member name="T:antlr.debug.ParseTreeDebugParser">
            <summary>
            Specifies the behaviour required (i.e. parser modifications) 
            specifically to support parse tree debugging and derivation.
            </summary>
            <remarks>
            <para>
            Override the standard matching and rule entry/exit routines
            to build parse trees.  This class is useful for 2.7.3 where
            you can specify a superclass like
            </para>
            <para>
            class TinyCParser extends Parser(ParseTreeDebugParser);
            </para>
            </remarks>
        </member>
        <member name="F:antlr.debug.ParseTreeDebugParser.currentParseTreeRoot">
            <summary>
            Each new rule invocation must have it's own subtree. Tokens are
            added to the current root so we must have a stack of subtree roots.
            </summary>
        </member>
        <member name="F:antlr.debug.ParseTreeDebugParser.mostRecentParseTreeRoot">
            <summary>
            Track most recently created parse subtree so that when parsing
            is finished, we can get to the root.
            </summary>
        </member>
        <member name="F:antlr.debug.ParseTreeDebugParser.numberOfDerivationSteps">
            <summary>
            For every rule replacement with a production, we bump up count.
            </summary>
        </member>
        <member name="M:antlr.debug.ParseTreeDebugParser.addCurrentTokenToParseTree">
            <summary>
            Adds LT(1) to the current parse subtree.
            </summary>
            <remarks>
            <para>
            Note that the match() routines add the node before checking for 
            correct match.  This means that, upon mismatched token, there 
            will a token node in the tree corresponding to where that token 
            was expected.  For no viable alternative errors, no node will 
            be in the tree as nothing was matched() (the lookahead failed 
            to predict an alternative).
            </para>
            </remarks>
        </member>
        <member name="M:antlr.debug.ParseTreeDebugParser.traceIn(System.String)">
            <summary>
            Create a rule node, add to current tree, and make it current root
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:antlr.debug.ParseTreeDebugParser.traceOut(System.String)">
            <summary>
            Pop current root; back to adding to old root
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:antlr.debug.NewLineEventArgs.ToString">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="M:antlr.debug.InputBufferReporter.inputBufferConsume(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary> charBufferConsume method comment.
            </summary>
        </member>
        <member name="M:antlr.debug.InputBufferReporter.inputBufferLA(System.Object,antlr.debug.InputBufferEventArgs)">
            <summary> charBufferLA method comment.
            </summary>
        </member>
        <member name="T:vCards.vCardPhotoCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardPhoto"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardPhoto"/>
        </member>
        <member name="M:vCards.vCardPhotoCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:vCards.vCardPhotoCollection"/>.
            </summary>
        </member>
        <member name="T:vCards.vCardFormat">
            <summary>
                Identifies different vCard formats.
            </summary>
        </member>
        <member name="F:vCards.vCardFormat.Text">
            <summary>
                Standard text format.
            </summary>
        </member>
        <member name="F:vCards.vCardFormat.JabberXml">
            <summary>
                Jabber XML format (not implemented yet).
            </summary>
        </member>
        <member name="F:vCards.vCardFormat.Rdf">
            <summary>
                RDF format (not implemented yet).
            </summary>
        </member>
        <member name="F:vCards.vCardFormat.hCard">
            <summary>
                hCard microformat (not implemented yet).
            </summary>
        </member>
        <member name="T:vCards.vCardEmailAddress">
            <summary>
                An email address in a <see cref="T:vCards.vCard"/>.
            </summary>
            <remarks>
                Most vCard email addresses are Internet email addresses.  However,
                the vCard specification allows other email address formats,
                such as CompuServe and X400.  Unless otherwise specified, an
                address is assumed to be an Internet address.
            </remarks>
            <seealso cref="T:vCards.vCardEmailAddressCollection"/>
            <seealso cref="T:vCards.vCardEmailAddressType"/>
        </member>
        <member name="M:vCards.vCardEmailAddress.#ctor">
            <summary>
                Creates a new <see cref="T:vCards.vCardEmailAddress"/>.
            </summary>
        </member>
        <member name="M:vCards.vCardEmailAddress.#ctor(System.String)">
            <summary>
                Creates a new Internet <see cref="T:vCards.vCardEmailAddress"/>.
            </summary>
            <param name="address">
                The Internet email address.
            </param>
        </member>
        <member name="M:vCards.vCardEmailAddress.#ctor(System.String,vCards.vCardEmailAddressType)">
            <summary>
                Creates a new <see cref="T:vCards.vCardEmailAddress"/> of the specified type.
            </summary>
            <param name="address">
                The email address.
            </param>
            <param name="emailType">
                The type of email address.
            </param>
        </member>
        <member name="M:vCards.vCardEmailAddress.ToString">
            <summary>
                Builds a string that represents the email address.
            </summary>
        </member>
        <member name="P:vCards.vCardEmailAddress.Address">
            <summary>
                The email address.
            </summary>
            <remarks>
                The format of the email address is not validated by the class.
            </remarks>
        </member>
        <member name="P:vCards.vCardEmailAddress.EmailType">
            <summary>
                The email address type.
            </summary>
        </member>
        <member name="P:vCards.vCardEmailAddress.IsPreferred">
            <summary>
                Indicates a preferred (top priority) email address.
            </summary>
        </member>
        <member name="T:iCal.CalendarParameterCompositeList">
            <summary>
            This class works similar to the CalendarPropertyCompositeList class,
            but works with parameters instead of properties.
            
            It consolidates parameters of a given name into a list,
            and allows you to work with those values directly against the
            parameters themselves.  This preserves the notion that our values
            are still stored directly within the calendar parameter, but gives
            us the flexibility to work with multiple parameters through a
            single (composite) list.
            </summary>
        </member>
        <member name="T:vCards.WarningMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:vCards.WarningMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:vCards.WarningMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:vCards.WarningMessages.BlankLine">
            <summary>
              Looks up a localized string similar to Line {0} A blank line was encountered.  This is not allowed in the vCard specification..
            </summary>
        </member>
        <member name="P:vCards.WarningMessages.ColonMissing">
            <summary>
              Looks up a localized string similar to Line {0}: A colon (:) is missing.  All properties must be in NAME:VALUE format..
            </summary>
        </member>
        <member name="P:vCards.WarningMessages.EmptyName">
            <summary>
              Looks up a localized string similar to Line {0}: The name section of the property is empty..
            </summary>
        </member>
        <member name="T:vCards.vCardWebsiteCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardWebsite"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardWebsite"/>
            <seealso cref="T:vCards.vCardWebsiteTypes"/>
        </member>
        <member name="M:vCards.vCardWebsiteCollection.GetFirstChoice(vCards.vCardWebsiteTypes)">
            <summary>
                Returns the first web site of the specified type.  If
                the collection does not contain a website of the specified
                type, but does contain a default (uncategorized) website,
                then that website will be returned.
            </summary>
            <param name="siteType"></param>
            <returns></returns>
        </member>
        <member name="T:iCal.AlarmOccurrence">
            <summary>
            A class that represents a specific occurrence of an <see cref="P:iCal.AlarmOccurrence.Alarm"/>.        
            </summary>
            <remarks>
            The <see cref="T:iCal.AlarmOccurrence"/> contains the <see cref="P:iCal.AlarmOccurrence.Period"/> when
            the alarm occurs, the <see cref="P:iCal.AlarmOccurrence.Alarm"/> that fired, and the 
            component on which the alarm fired.
            </remarks>
        </member>
        <member name="M:antlr.CommonAST.CommonASTCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonAST.CommonASTCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="M:antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.collections.AST"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.ASTNodeTypeName">
            <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
        </member>
        <member name="T:vCards.vCardPropertyCollection">
            <summary>
                A generic collection of <see cref="T:vCards.vCardProperty"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardProperty"/>
        </member>
        <member name="T:vCards.vCardDeliveryAddressCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardDeliveryAddress"/> objects.
            </summary>
            <seealso cref="T:vCards.vCardDeliveryAddress"/>
        </member>
        <member name="T:iCal.iCalendar">
             <summary>
             A class that represents an iCalendar object.  To load an iCalendar object, generally a
             static LoadFromXXX method is used.
             <example>
                 For example, use the following code to load an iCalendar object from a URL:
                 <code>
                    IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://somesite.com/calendar.ics"));
                 </code>
             </example>
             Once created, an iCalendar object can be used to gathers relevant information about
             events, todos, time zones, journal entries, and free/busy time.
             </summary>
             <remarks>
             <para>
             The following is an example of loading an iCalendar and displaying a text-based calendar.
             
             <code>
             //
             // The following code loads and displays an iCalendar 
             // with US Holidays for 2006.
             //
             IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://www.applegatehomecare.com/Calendars/USHolidays.ics"));
             
             IList&lt;Occurrence&gt; occurrences = iCal.GetOccurrences(
                 new iCalDateTime(2006, 1, 1, "US-Eastern", iCal),
                 new iCalDateTime(2006, 12, 31, "US-Eastern", iCal));
             
             foreach (Occurrence o in occurrences)
             {
                 IEvent evt = o.Component as IEvent;
                 if (evt != null)
                 {
                     // Display the date of the event
                     Console.Write(o.Period.StartTime.Local.Date.ToString("MM/dd/yyyy") + " -\t");
            
                     // Display the event summary
                     Console.Write(evt.Summary);
            
                     // Display the time the event happens (unless it's an all-day event)
                     if (evt.Start.HasTime)
                     {
                         Console.Write(" (" + evt.Start.Local.ToShortTimeString() + " - " + evt.End.Local.ToShortTimeString());
                         if (evt.Start.TimeZoneInfo != null)
                             Console.Write(" " + evt.Start.TimeZoneInfo.TimeZoneName);
                         Console.Write(")");
                     }
            
                     Console.Write(Environment.NewLine);
                 }
             }
             </code>
             </para>
             <para>
             The following example loads all active to-do items from an iCalendar:
             
             <code>
             //
             // The following code loads and displays active todo items from an iCalendar
             // for January 6th, 2006.
             //
             IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://somesite.com/calendar.ics"));
             
             iCalDateTime dt = new iCalDateTime(2006, 1, 6, "US-Eastern", iCal);
             foreach(Todo todo in iCal.Todos)
             {
                 if (todo.IsActive(dt))
                 {
                     // Display the todo summary
                     Console.WriteLine(todo.Summary);
                 }
             }
             </code>
             </para>
             </remarks>
        </member>
        <member name="M:iCal.iCalendar.LoadFromFile(System.String)">
            <summary>
            Loads an <see cref="T:iCal.iCalendar"/> from the file system.
            </summary>
            <param name="Filepath">The path to the file to load.</param>
            <returns>An <see cref="T:iCal.iCalendar"/> object</returns>        
        </member>
        <member name="M:iCal.iCalendar.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads an <see cref="T:iCal.iCalendar"/> from an open stream.
            </summary>
            <param name="s">The stream from which to load the <see cref="T:iCal.iCalendar"/> object</param>
            <returns>An <see cref="T:iCal.iCalendar"/> object</returns>
        </member>
        <member name="M:iCal.iCalendar.LoadFromUri(System.Uri)">
            <summary>
            Loads an <see cref="T:iCal.iCalendar"/> from a given Uri.
            </summary>
            <param name="url">The Uri from which to load the <see cref="T:iCal.iCalendar"/> object</param>
            <returns>An <see cref="T:iCal.iCalendar"/> object</returns>
        </member>
        <member name="M:iCal.iCalendar.LoadFromUri(System.Uri,System.String,System.String)">
            <summary>
            Loads an <see cref="T:iCal.iCalendar"/> from a given Uri, using a 
            specified <paramref name="username"/> and <paramref name="password"/>
            for credentials.
            </summary>
            <param name="url">The Uri from which to load the <see cref="T:iCal.iCalendar"/> object</param>
            <returns>an <see cref="T:iCal.iCalendar"/> object</returns>
        </member>
        <member name="M:iCal.iCalendar.#ctor">
            <summary>
            To load an existing an iCalendar object, use one of the provided LoadFromXXX methods.
            <example>
            For example, use the following code to load an iCalendar object from a URL:
            <code>
                IICalendar iCal = iCalendar.LoadFromUri(new Uri("http://somesite.com/calendar.ics"));
            </code>
            </example>
            </summary>
        </member>
        <member name="M:iCal.iCalendar.AddTimeZone(iCal.ITimeZone)">
            <summary>
            Adds a time zone to the iCalendar.  This time zone may
            then be used in date/time objects contained in the 
            calendar.
            </summary>        
            <returns>The time zone added to the calendar.</returns>
        </member>
        <member name="M:iCal.iCalendar.GetTimeZone(System.String)">
            <summary>
            Retrieves the <see cref="T:iCal.ITimeZone"/> object for the specified
            <see cref="P:iCal.ITimeZone.TZID"/> (Time Zone Identifier).
            </summary>
            <param name="tzid">A valid <see cref="P:iCal.ITimeZone.TZID"/> object, or a valid <see cref="P:iCal.ITimeZone.TZID"/> string.</param>
            <returns>A <see cref="T:System.TimeZone"/> object for the <see cref="P:iCal.ITimeZone.TZID"/>.</returns>
        </member>
        <member name="M:iCal.iCalendar.Evaluate(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Evaluates component recurrences for the given range of time.
            <example>
                For example, if you are displaying a month-view for January 2007,
                you would want to evaluate recurrences for Jan. 1, 2007 to Jan. 31, 2007
                to display relevant information for those dates.
            </example>
            </summary>
            <param name="FromDate">The beginning date/time of the range to test.</param>
            <param name="ToDate">The end date/time of the range to test.</param>
        </member>
        <member name="M:iCal.iCalendar.Evaluate``1(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Evaluates component recurrences for the given range of time, for
            the type of recurring component specified.
            </summary>
            <typeparam name="T">The type of component to be evaluated for recurrences.</typeparam>
            <param name="FromDate">The beginning date/time of the range to test.</param>
            <param name="ToDate">The end date/time of the range to test.</param>
        </member>
        <member name="M:iCal.iCalendar.ClearEvaluation">
            <summary>
            Clears recurrence evaluations for recurring components.        
            </summary>        
        </member>
        <member name="M:iCal.iCalendar.GetOccurrences(iCal.IDateTime)">
            <summary>
            Returns a list of occurrences of each recurring component
            for the date provided (<paramref name="dt"/>).
            </summary>
            <param name="dt">The date for which to return occurrences. Time is ignored on this parameter.</param>
            <returns>A list of occurrences that occur on the given date (<paramref name="dt"/>).</returns>
        </member>
        <member name="M:iCal.iCalendar.GetOccurrences(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Returns a list of occurrences of each recurring component
            that occur between <paramref name="FromDate"/> and <paramref name="ToDate"/>.
            </summary>
            <param name="FromDate">The beginning date/time of the range.</param>
            <param name="ToDate">The end date/time of the range.</param>
            <returns>A list of occurrences that fall between the dates provided.</returns>
        </member>
        <member name="M:iCal.iCalendar.GetOccurrences``1(iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start on the date provided.
            All components starting between 12:00:00AM and 11:59:59 PM will be
            returned.
            <note>
            This will first Evaluate() the date range required in order to
            determine the occurrences for the date provided, and then return
            the occurrences.
            </note>
            </summary>
            <param name="dt">The date for which to return occurrences.</param>
            <returns>A list of Periods representing the occurrences of this object.</returns>
        </member>
        <member name="M:iCal.iCalendar.GetOccurrences``1(iCal.IDateTime,iCal.IDateTime)">
            <summary>
            Returns all occurrences of components of type T that start within the date range provided.
            All components occurring between <paramref name="startTime"/> and <paramref name="endTime"/>
            will be returned.
            </summary>
            <param name="startTime">The starting date range</param>
            <param name="endTime">The ending date range</param>
        </member>
        <member name="M:iCal.iCalendar.Create``1">
            <summary>
            Creates a typed object that is a direct child of the iCalendar itself.  Generally,
            you would invoke this method to create an Event, Todo, Journal, TimeZone, FreeBusy,
            or other base component type.
            </summary>
            <example>
            To create an event, use the following:
            <code>
            IICalendar iCal = new iCalendar();
            
            Event evt = iCal.Create&lt;Event&gt;();
            </code>
            
            This creates the event, and adds it to the Events list of the iCalendar.
            </example>
            <typeparam name="T">The type of object to create</typeparam>
            <returns>An object of the type specified</returns>
        </member>
        <member name="P:iCal.iCalendar.Events">
            <summary>
            A collection of <see cref="T:iCal.Event"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:iCal.iCalendar.FreeBusy">
            <summary>
            A collection of <see cref="T:iCal.IFreeBusy"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:iCal.iCalendar.Journals">
            <summary>
            A collection of <see cref="T:iCal.Journal"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:iCal.iCalendar.TimeZones">
            <summary>
            A collection of <see cref="T:iCal.ITimeZone"/> components in the iCalendar.
            </summary>
        </member>
        <member name="P:iCal.iCalendar.Todos">
            <summary>
            A collection of <see cref="T:iCal.Todo"/> components in the iCalendar.
            </summary>
        </member>
        <member name="T:iCal.StatusCode">
            <summary>
            An iCalendar status code.
            </summary>
        </member>
        <member name="T:iCal.RecurrencePattern">
            <summary>
            An iCalendar representation of the <c>RRULE</c> property.
            </summary>
        </member>
        <member name="T:iCal.Journal">
            <summary>
            A class that represents an RFC 5545 VJOURNAL component.
            </summary>
        </member>
        <member name="T:antlr.TokenStreamRewriteEngine">
            <summary>
            This token stream tracks the *entire* token stream coming from
            a lexer, but does not pass on the whitespace (or whatever else
            you want to discard) to the parser.
            </summary>
            <remarks>
            <para>
            This class can then be asked for the ith token in the input stream.
            Useful for dumping out the input stream exactly after doing some
            augmentation or other manipulations.  Tokens are index from 0..n-1
            </para>
            <para>
            You can insert stuff, replace, and delete chunks.  Note that the
            operations are done lazily--only if you convert the buffer to a
            string.  This is very efficient because you are not moving data around
            all the time.  As the buffer of tokens is converted to strings, the
            toString() method(s) check to see if there is an operation at the
            current index.  If so, the operation is done and then normal string
            rendering continues on the buffer.  This is like having multiple Turing
            machine instruction streams (programs) operating on a single input tape. :)
            </para>
            <para>
            Since the operations are done lazily at toString-time, operations do not
            screw up the token index values.  That is, an insert operation at token
            index i does not change the index values for tokens i+1..n-1.
            </para>
            <para>
            Because operations never actually alter the buffer, you may always get
            the original token stream back without undoing anything.  Since
            the instructions are queued up, you can easily simulate transactions and
            roll back any changes if there is an error just by removing instructions.
            For example,
            </para>
            <example>For example:
            <code>
            TokenStreamRewriteEngine rewriteEngine = new TokenStreamRewriteEngine(lexer);
            JavaRecognizer           parser        = new JavaRecognizer(rewriteEngine);
            ...
            rewriteEngine.insertAfter("pass1", t, "foobar");}
            rewriteEngine.insertAfter("pass2", u, "start");}
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass1"));
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass2"));
            </code>
            </example>
            <para>
            You can also have multiple "instruction streams" and get multiple
            rewrites from a single pass over the input.  Just name the instruction
            streams and use that name again when printing the buffer.  This could be
            useful for generating a C file and also its header file--all from the
            same buffer.
            </para>
            <para>
            If you don't use named rewrite streams, a "default" stream is used.
            </para>
            <para>
            Terence Parr, parrt@cs.usfca.edu
            University of San Francisco
            February 2004
            </para>
            </remarks>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.tokens">
            <summary>
            Track the incoming list of tokens
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.programs">
            <summary>
            You may have multiple, named streams of rewrite operations.
            I'm calling these things "programs."
            Maps string (name) -> rewrite (List)
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.lastRewriteTokenIndexes">
            <summary>
            Map string (program name) -> Integer index
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.index">
            <summary>
            track index of tokens
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.stream">
            <summary>
            Who do we suck tokens from?
            </summary>
        </member>
        <member name="F:antlr.TokenStreamRewriteEngine.discardMask">
            <summary>
            Which (whitespace) token(s) to throw out
            </summary>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.rollback(System.String,System.Int32)">
            <summary>
            Rollback the instruction stream for a program so that
            the indicated instruction (via instructionIndex) is no
            longer in the stream.
            </summary>
            <remarks>
            UNTESTED!
            </remarks>
            <param name="programName"></param>
            <param name="instructionIndex"></param>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.deleteProgram(System.String)">
            <summary>
            Reset the program so that no instructions exist
            </summary>
            <param name="programName"></param>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.addToSortedRewriteList(antlr.TokenStreamRewriteEngine.RewriteOperation)">
            <summary>
            If op.index > lastRewriteTokenIndexes, just add to the end.
            Otherwise, do linear
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:antlr.TokenStreamRewriteEngine.RewriteOperation.execute(System.Text.StringBuilder)">
            <summary>
            Execute the rewrite operation by possibly adding to the buffer.
            </summary>
            <param name="buf">rewrite buffer</param>
            <returns>The index of the next token to operate on.</returns>
        </member>
        <member name="T:antlr.debug.SemanticPredicateListenerBase">
            <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.SemanticPredicateListener"/> subclasses.
            </summary>
            <remarks>
            	<param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.SemanticPredicateListener"/>s. 
            	You should extend this base class rather than creating your own.
            	</param>
            </remarks>
        </member>
        <member name="M:antlr.debug.SemanticPredicateListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
            <summary>
            Handle the "Done" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="M:antlr.debug.SemanticPredicateListenerBase.semanticPredicateEvaluated(System.Object,antlr.debug.SemanticPredicateEventArgs)">
            <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
            <param name="source">Event source object</param>
            <param name="e">Event data object</param>
        </member>
        <member name="T:vCards.vCardWriter">
            <summary>
                Base class for vCard generators.
            </summary>
            <seealso cref="T:vCards.vCardReader"/>
            <seealso cref="T:vCards.vCardStandardWriter"/>
        </member>
        <member name="F:vCards.vCardWriter.warnings">
            <summary>
                Holds output warnings.
            </summary>
        </member>
        <member name="M:vCards.vCardWriter.Write(vCards.vCard,System.IO.TextWriter,System.String)">
            <summary>
                Writes a vCard to an I/O stream using the format
                implemented by the class.
            </summary>
            <param name="card">
                The vCard to write the I/O string.
            </param>
            <param name="output">
                The text writer to use for output.
            </param>
            <remarks>
                The implementor should not close or flush the stream.
                The caller owns the stream and may not wish for the
                stream to be closed (e.g. the caller may call the
                function again with a different vCard).
            </remarks>
        </member>
        <member name="M:vCards.vCardWriter.Write(vCards.vCard,System.String,System.String)">
            <summary>
                Writes the vCard to the specified filename.
            </summary>
        </member>
        <member name="P:vCards.vCardWriter.Warnings">
            <summary>
                A collection of warning messages that were generated
                during the output of a vCard.
            </summary>
        </member>
        <member name="T:vCards.vCardStandardWriter">
            <summary>
                Implements the standard vCard 2.1 and 3.0 text formats.
            </summary>
        </member>
        <member name="F:vCards.vCardStandardWriter.standardEscapedCharacters">
            <summary>
                The characters that are escaped per the original
                vCard specification.
            </summary>
        </member>
        <member name="F:vCards.vCardStandardWriter.outlookEscapedCharacters">
            <summary>
                The characters that are escaped by Microsoft Outlook.
            </summary>
            <remarks>
                Microsoft Outlook does not property decode escaped
                commas in values.
            </remarks>
        </member>
        <member name="M:vCards.vCardStandardWriter.#ctor">
            <summary>
                Creates a new instance of the standard writer.
            </summary>
            <remarks>
                The standard writer is configured to create vCard
                files in the highest supported version.  This is
                currently version 3.0.
            </remarks>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties(vCards.vCard)">
            <summary>
                Builds a collection of standard properties based on
                the specified vCard.
            </summary>
            <returns>
                A <see cref="T:vCards.vCardPropertyCollection"/> that contains all
                properties for the current vCard, including the header
                and footer properties.
            </returns>
            <seealso cref="T:vCards.vCard"/>
            <seealso cref="T:vCards.vCardProperty"/>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_ADR(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds ADR properties.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_BDAY(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the BDAY property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_EMAIL(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds EMAIL properties.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_GEO(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the GEO property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_KEY(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds KEY properties.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_MAILER(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the MAILER property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_NICKNAME(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the NICKNAME property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_NOTE(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the NOTE property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_ORG(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the ORG property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_PRODID(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds PRODID properties.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_REV(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the REV property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_ROLE(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds the ROLE property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_SOURCE(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds SOURCE properties.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.BuildProperties_TEL(vCards.vCardPropertyCollection,vCards.vCard)">
            <summary>
                Builds TEL properties.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeBase64(System.Byte)">
            <summary>
                Converts a byte to a BASE64 string.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeBase64(System.Byte[])">
            <summary>
                Converts a byte array to a BASE64 string.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeBase64(System.Int32)">
            <summary>
                Converts an integer to a BASE64 string.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeEscaped(System.String)">
            <summary>
                Encodes a string using simple escape codes.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeEscaped(System.String,System.Char[])">
            <summary>
                Encodes a character array using simple escape sequences.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeQuotedPrintable(System.String,System.Text.Encoding)">
            <summary>
                Converts a string to quoted-printable format.
            </summary>
            <param name="value">
                The value to encode in Quoted Printable format.
            </param>
            <returns>
                The value encoded in Quoted Printable format.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardWriter.EncodeProperty(vCards.vCardProperty)">
            <summary>
                Returns property encoded into a standard vCard NAME:VALUE format.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.Write(vCards.vCard,System.IO.TextWriter,System.String)">
            <summary>
                Writes a vCard to an output text writer.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardWriter.Write(vCards.vCardPropertyCollection,System.IO.TextWriter,System.String)">
            <summary>
                Writes a collection of vCard properties to an output text writer.
            </summary>
        </member>
        <member name="P:vCards.vCardStandardWriter.EmbedInternetImages">
            <summary>
                Indicates whether images that reference Internet
                URLs should be embedded in the output.  If not, 
                then a URL is written instead.
            </summary>
        </member>
        <member name="P:vCards.vCardStandardWriter.EmbedLocalImages">
            <summary>
                Indicates whether or not references to local
                images should be embedded in the vCard.  If not,
                then a local file reference is written instead.
            </summary>
        </member>
        <member name="P:vCards.vCardStandardWriter.Options">
            <summary>
                Extended options for the vCard writer.
            </summary>
        </member>
        <member name="P:vCards.vCardStandardWriter.ProductId">
            <summary>
                The product ID to use when writing a vCard.
            </summary>
        </member>
        <member name="T:vCards.vCardStandardReader">
            <summary>
                Reads a vCard written in the standard 2.0 or 3.0 text formats.
                This is the primary (standard) vCard format used by most
                applications.  
            </summary>
            <seealso cref="T:vCards.vCardReader"/>
        </member>
        <member name="T:vCards.vCardReader">
            <summary>
                An abstract reader for vCard and vCard-like file formats.
            </summary>
            <remarks>
                <para>
                    The <see cref="P:vCards.vCardReader.Warnings"/> property is a string collection
                    containing a description of each warning encountered during
                    the read process.  An implementor of a card reader should
                    populate this collection as the vCard data is being parsed.
                </para>
            </remarks>
        </member>
        <member name="F:vCards.vCardReader.warnings">
            <summary>
                Stores the warnings issued by the implementor
                of the vCard reader.  Currently warnings are
                simple string messages; a future version will
                store line numbers, severity levels, etc.
            </summary>
            <seealso cref="P:vCards.vCardReader.Warnings"/>
        </member>
        <member name="M:vCards.vCardReader.#ctor">
            <summary>
                Initializes the base reader.
            </summary>
        </member>
        <member name="M:vCards.vCardReader.Read(System.IO.TextReader)">
            <summary>
                Reads a vCard from the specified input stream.
            </summary>
            <param name="reader">
                A text reader that points to the beginning of
                a vCard in the format expected by the implementor.
            </param>
            <returns>
                An initialized <see cref="T:vCards.vCard"/> object.
            </returns>
        </member>
        <member name="M:vCards.vCardReader.ReadInto(vCards.vCard,System.IO.TextReader)">
            <summary>
                Reads vCard information from a text reader and
                populates into an existing vCard object.
            </summary>
            <param name="card">
                An initialized vCard object.
            </param>
            <param name="reader">
                A text reader containing vCard data in the format
                expected by the card reader class.
            </param>
        </member>
        <member name="P:vCards.vCardReader.Warnings">
            <summary>
                A collection of warning messages.
            </summary>
            <remarks>Reseved for future use.</remarks>
        </member>
        <member name="F:vCards.vCardStandardReader.DeliveryAddressTypeNames">
            <summary>
                The DeliveryAddressTypeNames array contains the recognized
                TYPE values for an ADR (delivery address).
            </summary>
        </member>
        <member name="F:vCards.vCardStandardReader.PhoneTypeNames">
            <summary>
                The PhoneTypeNames constant defines the recognized
                subproperty names that identify the category or
                classification of a phone.  The names are used with
                the TEL property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:vCards.vCardStandardReader"/>.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.DecodeBase64(System.String)">
            <summary>
                Decodes a string containing BASE64 characters.
            </summary>
            <param name="value">
                A string containing data that has been encoded with
                the BASE64 format.
            </param>
            <returns>
                The decoded data as a byte array.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.DecodeBase64(System.Char[])">
            <summary>
                Converts BASE64 data that has been stored in a 
                character array.
            </summary>
            <param name="value">
                A character array containing BASE64 data.
            </param>
            <returns>
                A byte array containing the decoded BASE64 data.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.DecodeEmailAddressType(System.String)">
            <summary>
                Parses the name of an email address type.
            </summary>
            <param name="keyword">
                The email address type keyword found in the vCard file (e.g. AOL or INTERNET).
            </param>
            <returns>
                Null or the decoded <see cref="T:vCards.vCardEmailAddressType"/>.
            </returns>
            <seealso cref="T:vCards.vCardEmailAddress"/>
            <seealso cref="T:vCards.vCardEmailAddressType"/>
        </member>
        <member name="M:vCards.vCardStandardReader.DecodeEscaped(System.String)">
            <summary>
                Decodes a string that has been encoded with the standard
                vCard escape codes.
            </summary>
            <param name="value">
                A string encoded with vCard escape codes.
            </param>
            <returns>
                The decoded string.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.DecodeHexadecimal(System.Char)">
            <summary>
                Converts a single hexadecimal character to
                its integer value.
            </summary>
            <param name="value">
                A Unicode character.
            </param>
        </member>
        <member name="M:vCards.vCardStandardReader.DecodeQuotedPrintable(System.String)">
            <summary>
                Decodes a string that has been encoded in QUOTED-PRINTABLE format.
            </summary>
            <param name="value">
                A string that has been encoded in QUOTED-PRINTABLE.
            </param>
            <returns>
                The decoded string.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.IsHexDigit(System.Char)">
            <summary>
                Indicates whether the specified character is
                a hexadecimal digit.
            </summary>
            
            <param name="value">
                A unicode character
            </param>
        </member>
        <member name="M:vCards.vCardStandardReader.ParseDate(System.String)">
            <summary>
                Parses a string containing a date/time value.
            </summary>
            <param name="value">
                A string containing a date/time value.
            </param>
            <returns>
                The parsed date, or null if no date could be parsed.
            </returns>
            <remarks>
                Some revision dates, such as those generated by Outlook,
                are not directly supported by the .NET DateTime parser.
                This function attempts to accomodate the non-standard formats.
            </remarks>
        </member>
        <member name="M:vCards.vCardStandardReader.ParseEncoding(System.String)">
            <summary>
                Parses an encoding name (such as "BASE64") and returns
                the corresponding <see cref="T:vCards.vCardEncoding"/> value.
            </summary>
            <param name="name">
                The name of an encoding from a standard vCard property.
            </param>
            <returns>
                The enumerated value of the encoding.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.ParsePhoneType(System.String)">
            <summary>
                Parses the name of a phone type and returns the
                corresponding <see cref="T:vCards.vCardPhoneTypes"/> value.
            </summary>
            <param name="name">
                The name of a phone type from a TEL vCard property.
            </param>
            <returns>
                The enumerated value of the phone type, or Default
                if the phone type could not be determined.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.ParsePhoneType(System.String[])">
            <summary>
                Decodes the bitmapped phone type given an array of
                phone type names.
            </summary>
            <param name="names">
                An array containing phone type names such as BBS or VOICE.
            </param>
            <returns>
                The phone type value that represents the combination
                of all names defined in the array.  Unknown names are
                ignored.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.ParseDeliveryAddressType(System.String)">
            <summary>
                Parses the type of postal address.
            </summary>
            <param name="value">
                The single value of a TYPE subproperty for the ADR property.
            </param>
            <returns>
                The <see cref="T:vCards.vCardDeliveryAddressTypes"/> that corresponds
                with the TYPE keyword, or vCardPostalAddressType.Default if
                the type could not be identified.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.ParseDeliveryAddressType(System.String[])">
            <summary>
                Parses a string array containing one or more
                postal address types.
            </summary>
            <param name="typeNames">
                A string array containing zero or more keywords
                used with the TYPE subproperty of the ADR property.
            </param>
            <returns>
                A <see cref="T:vCards.vCardDeliveryAddressTypes"/> flags enumeration
                that corresponds with all known type names from the array.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto(vCards.vCard,System.IO.TextReader)">
            <summary>
                Reads a vCard (VCF) file from an input stream.
            </summary>
            <param name="card">
                An initialized vCard.
            </param>
            <param name="reader">
                A text reader pointing to the beginning of
                a standard vCard file.
            </param>
            <returns>
                The vCard with values updated from the file.
            </returns>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Updates a vCard object based on the contents of a vCardProperty.
            </summary>
            <param name="card">
                An initialized vCard object.
            </param>
            <param name="property">
                An initialized vCardProperty object.
            </param>
            <remarks>
                <para>
                    This method examines the contents of a property
                    and attempts to update an existing vCard based on
                    the property name and value.  This function must
                    be updated when new vCard properties are implemented.
                </para>
            </remarks>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_ADR(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads an ADR property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_BDAY(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the BDAY property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_CATEGORIES(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the CATEGORIES property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_CLASS(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the CLASS property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_EMAIL(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads an EMAIL property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_FN(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the FN property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_GEO(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the GEO property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_KEY(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the KEY property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_LABEL(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the LABEL property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_MAILER(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the MAILER property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_N(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the N property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_NAME(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the NAME property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_NICKNAME(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the NICKNAME property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_NOTE(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the NOTE property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_ORG(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the ORG property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_PHOTO(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the PHOTO property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_PRODID(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the PRODID property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_REV(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the REV property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_ROLE(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the ROLE property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_SOURCE(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the SOURCE property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_TEL(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the TEL property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_TITLE(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the TITLE property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_TZ(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads a TZ property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_UID(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the UID property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_URL(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the URL property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadInto_X_WAB_GENDER(vCards.vCard,vCards.vCardProperty)">
            <summary>
                Reads the X-WAB-GENDER property.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadProperty(System.String)">
            <summary>
                Reads a property from a string.
            </summary>
        </member>
        <member name="M:vCards.vCardStandardReader.ReadProperty(System.IO.TextReader)">
            <summary>
                Reads a property from a text reader.
            </summary>
        </member>
        <member name="T:vCards.vCardStandardReader.QuotedPrintableState">
            <summary>
                The state of the quoted-printable decoder (private).
            </summary>
            <remarks>
                The <see cref="M:vCards.vCardStandardReader.DecodeQuotedPrintable(System.String)"/> function
                is a utility function that parses a string that
                has been encoded with the QUOTED-PRINTABLE format.
                The function is implemented as a state-pased parser
                where the state is updated after examining each 
                character of the input string.  This enumeration
                defines the various states of the parser.
            </remarks>
        </member>
        <member name="T:vCards.vCardSource">
            <summary>
                A source of directory information for a vCard.
            </summary>
            <remarks>
                <para>
                    A source identifies a directory that contains or provided
                    information for the vCard.  A source consists of a URI
                    and a context.  The URI is generally a URL; the
                    context identifies the protocol and type of URI.  For
                    example, a vCard associated with an LDAP directory entry
                    will have an ldap:// URL and a context of "LDAP".
                </para>
            </remarks>
            <seealso cref="T:vCards.vCardSourceCollection"/>
        </member>
        <member name="M:vCards.vCardSource.#ctor">
            <summary>
                Initializes a new instance of the vCardSource class.
            </summary>
        </member>
        <member name="M:vCards.vCardSource.#ctor(System.Uri)">
            <summary>
                Initializes a new source with the specified URI.
            </summary>
            <param name="uri">
                The URI of the directory entry.
            </param>
        </member>
        <member name="M:vCards.vCardSource.#ctor(System.Uri,System.String)">
            <summary>
                Initializes a new source with the specified
                context and URI.
            </summary>
            <param name="uri">
                The URI of the source of the vCard data.
            </param>
            <param name="context">
                The context of the source.
            </param>
        </member>
        <member name="P:vCards.vCardSource.Context">
            <summary>
                The context of the source URI.
            </summary>
            <remarks>
                The context identifies how the URI should be
                interpreted.  Example is "LDAP", which indicates
                the URI is an LDAP reference.
            </remarks>
        </member>
        <member name="P:vCards.vCardSource.Uri">
            <summary>
                The URI of the source.
            </summary>
        </member>
        <member name="T:vCards.vCardDeliveryLabelCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardDeliveryLabel"/> objects.
            </summary>
        </member>
        <member name="T:vCards.vCardCertificateCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardCertificate"/> objects.
            </summary>
        </member>
        <member name="T:iCal.EventStatus">
            <summary>
            Status codes available to an <see cref="T:iCal.Event"/> item
            </summary>
        </member>
        <member name="T:iCal.TodoStatus">
            <summary>
            Status codes available to a <see cref="T:iCal.Todo"/> item.
            </summary>
        </member>
        <member name="T:iCal.JournalStatus">
            <summary>
            Status codes available to a <see cref="T:iCal.Journal"/> entry.
            </summary>    
        </member>
        <member name="T:iCal.FrequencyOccurrence">
            <summary>
            Indicates the occurrence of the specific day within a
            MONTHLY or YEARLY recurrence frequency. For example, within
            a MONTHLY frequency, consider the following:
            
            Recur r = new Recur();
            r.Frequency = FrequencyType.Monthly;
            r.ByDay.Add(new WeekDay(DayOfWeek.Monday, FrequencyOccurrence.First));
            
            The above example represents the first Monday within the month,
            whereas if FrequencyOccurrence.Last were specified, it would 
            represent the last Monday of the month.
            
            For a YEARLY frequency, consider the following:
            
            Recur r = new Recur();
            r.Frequency = FrequencyType.Yearly;
            r.ByDay.Add(new WeekDay(DayOfWeek.Monday, FrequencyOccurrence.Second));
            
            The above example represents the second Monday of the year.  This can
            also be represented with the following code:
            
            r.ByDay.Add(new WeekDay(DayOfWeek.Monday, 2));
            </summary>
        </member>
        <member name="F:iCal.RecurrenceRestrictionType.Default">
            <summary>
            Same as RestrictSecondly.
            </summary>
        </member>
        <member name="F:iCal.RecurrenceRestrictionType.NoRestriction">
            <summary>
            Does not restrict recurrence evaluation - WARNING: this may cause very slow performance!
            </summary>
        </member>
        <member name="F:iCal.RecurrenceRestrictionType.RestrictSecondly">
            <summary>
            Disallows use of the SECONDLY frequency for recurrence evaluation
            </summary>
        </member>
        <member name="F:iCal.RecurrenceRestrictionType.RestrictMinutely">
            <summary>
            Disallows use of the MINUTELY and SECONDLY frequencies for recurrence evaluation
            </summary>
        </member>
        <member name="F:iCal.RecurrenceRestrictionType.RestrictHourly">
            <summary>
            Disallows use of the HOURLY, MINUTELY, and SECONDLY frequencies for recurrence evaluation
            </summary>
        </member>
        <member name="F:iCal.RecurrenceEvaluationModeType.Default">
            <summary>
            Same as ThrowException.
            </summary>
        </member>
        <member name="F:iCal.RecurrenceEvaluationModeType.AdjustAutomatically">
            <summary>
            Automatically adjusts the evaluation to the next-best frequency based on the restriction type.
            For example, if the restriction were IgnoreSeconds, and the frequency were SECONDLY, then
            this would cause the frequency to be adjusted to MINUTELY, the next closest thing.
            </summary>
        </member>
        <member name="F:iCal.RecurrenceEvaluationModeType.ThrowException">
            <summary>
            This will throw an exception if a recurrence rule is evaluated that does not meet the minimum
            restrictions.  For example, if the restriction were IgnoreSeconds, and a SECONDLY frequency
            were evaluated, an exception would be thrown.
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Publish">
            <summary>
            Used to publish an iCalendar object to one or
            more "Calendar Users".  There is no interactivity
            between the publisher and any other "Calendar User".
            An example might include a baseball team publishing
            its schedule to the public.
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Request">
            <summary>
            Used to schedule an iCalendar object with other
            "Calendar Users".  Requests are interactive in
            that they require the receiver to respond using
            the reply methods.  Meeting requests, busy-time
            requests, and the assignment of tasks to other
            "Calendar Users" are all examples.  Requests are
            also used by the Organizer to update the status
            of an iCalendar object. 
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Reply">
            <summary>
            A reply is used in response to a request to
            convey Attendee status to the Organizer.
            Replies are commonly used to respond to meeting
            and task requests.     
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Add">
            <summary>
            Add one or more new instances to an existing
            recurring iCalendar object. 
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Cancel">
            <summary>
            Cancel one or more instances of an existing
            iCalendar object.
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Refresh">
            <summary>
            Used by an Attendee to request the latest
            version of an iCalendar object.
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.Counter">
            <summary>
            Used by an Attendee to negotiate a change in an
            iCalendar object.  Examples include the request
            to change a proposed event time or change the
            due date for a task.
            </summary>
        </member>
        <member name="F:iCal.CalendarMethods.DeclineCounter">
            <summary>
            Used by the Organizer to decline the proposed
            counter-proposal.
            </summary>
        </member>
        <member name="M:antlr.debug.MatchEventArgs.setValues(System.Int32,System.Int32,System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="T:vCards.vCardSubpropertyCollection">
            <summary>
                A collection of <see cref="T:vCards.vCardSubproperty"/> objects.
            </summary>
            <remarks>
                <para>
                    This class is a general-purpose collection of
                    <see cref="T:vCards.vCardSubproperty"/> objects.
                </para>
                <para>
                    A property of a vCard contains a piece of
                    contact information, such as an email address
                    or web site.  A subproperty indicates options
                    or attributes of the property, such as the
                    type of email address or character set.
                </para>
            </remarks>
            <seealso cref="T:vCards.vCardProperty"/>
            <seealso cref="T:vCards.vCardSubproperty"/>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.Add(System.String)">
            <summary>
                Adds a subproperty without a value.
            </summary>
            <param name="name">
                The name of the subproperty.
            </param>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.Add(System.String,System.String)">
            <summary>
                Adds a subproperty with the specified name and value.
            </summary>
            <param name="name">
                The name of the new subproperty to add.
            </param>
            <param name="value">
                The value of the new subproperty to add.  This can be null.
            </param>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.AddOrUpdate(System.String,System.String)">
            <summary>
                Either adds or updates a subproperty with the specified name.
            </summary>
            <param name="name">
                The name of the subproperty to add or update.
            </param>
            <param name="value">
                The value of the subproperty to add or update.
            </param>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.Contains(System.String)">
            <summary>
                Determines if the collection contains a subproperty
                with the specified name.
            </summary>
            <param name="name">
                The name of the subproperty.
            </param>
            <returns>
                True if the collection contains a subproperty with the
                specified name, or False otherwise.
            </returns>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.GetNames">
            <summary>
                Builds a string array containing subproperty names.
            </summary>
            <returns>
                A string array containing the unmodified name of
                each subproperty in the collection.
            </returns>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.GetNames(System.String[])">
            <summary>
                Builds a string array containing all subproperty
                names that match one of the names in an array.
            </summary>
            <param name="filteredNames">
                A list of valid subproperty names.
            </param>
            <returns>
                A string array containing the names of all subproperties
                that match an entry in the filterNames list.
            </returns>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.GetValue(System.String)">
            <summary>
                Get the value of the subproperty with
                the specified name.
            </summary>
            <param name="name">
                The name of the subproperty.
            </param>
            <returns>
                The value of the subproperty or null if no
                such subproperty exists in the collection.
            </returns>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.GetValue(System.String,System.String[])">
            <summary>
                Gets the value of the first subproperty with the
                specified name, or the first value specified in
                a list.
            </summary>
            <param name="name">
                The expected name of the subproperty.
            </param>
            <param name="namelessValues">
                A list of values that are sometimes listed as
                subproperty names.  The first matching value is
                returned if the name parameter does not match.
            </param>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.IndexOf(System.String)">
            <summary>
                Searches for a subproperty with the specified name.
            </summary>
            <param name="name">
                The name of the subproperty.
            </param>
            <returns>
                The collection (zero-based) index of the first
                subproperty that matches the specified name.  The
                function returns -1 if no match is found.
            </returns>
        </member>
        <member name="M:vCards.vCardSubpropertyCollection.IndexOfAny(System.String[])">
            <summary>
                Finds the first subproperty that has any of the
                specified names.
            </summary>
            <param name="names">
                An array of names to search.
            </param>
            <returns>
                The collection index of the first subproperty with
                the specified name, or -1 if no subproperty was found.
            </returns>
        </member>
        <member name="T:vCards.vCardNote">
            <summary>
                A note or comment in a vCard.
            </summary>
        </member>
        <member name="M:vCards.vCardNote.#ctor">
            <summary>
                Initializes a new vCard note.
            </summary>
        </member>
        <member name="M:vCards.vCardNote.#ctor(System.String)">
            <summary>
                Initializes a new vCard note with the specified text.
            </summary>
            <param name="text">
                The text of the note or comment.
            </param>
        </member>
        <member name="M:vCards.vCardNote.ToString">
            <summary>
                Returns the text of the note.
            </summary>
        </member>
        <member name="P:vCards.vCardNote.Language">
            <summary>
                The language of the note.
            </summary>
        </member>
        <member name="P:vCards.vCardNote.Text">
            <summary>
                The text of the note.
            </summary>
        </member>
        <member name="T:vCards.vCardEncoding">
            <summary>
                The encoding used to store a vCard property value in text format.
            </summary>
        </member>
        <member name="F:vCards.vCardEncoding.Unknown">
            <summary>
                Unknown or no encoding.
            </summary>
        </member>
        <member name="F:vCards.vCardEncoding.Escaped">
            <summary>
                Standard escaped text.
            </summary>
        </member>
        <member name="F:vCards.vCardEncoding.Base64">
            <summary>
              Binary or BASE64 encoding.
            </summary>
        </member>
        <member name="F:vCards.vCardEncoding.QuotedPrintable">
            <summary>
                Quoted-Printable encoding.
            </summary>
        </member>
        <member name="T:iCal.UniqueComponentList`1">
            <summary>
            A collection of iCalendar components.  This class is used by the 
            <see cref="T:iCal.iCalendar"/> class to maintain a collection of events,
            to-do items, journal entries, and free/busy times.
            </summary>
        </member>
        <member name="M:iCal.UniqueComponentList`1.ResolveUIDs">
            <summary>
            Re-links the UID dictionary to the actual components in our list.
            Also, if any items do not have a UID assigned to them, they will
            automatically have a UID assigned.
            </summary>
        </member>
        <member name="T:iCal.AssociatedCalendarParameterList">
            <summary>
            This class provides a parameter list via the associated container.
            <example>
            For example, let's say an event has several properties:
            
            BEGIN:VEVENT
            SUMMARY:My Event
            DTSTART;TZID=MST:20100703T080000
            DTEND;TZID=MST:20100703T090000
            END:VEVENT
            
            When we process this event, we get an object model similar to this:
            
            Event
              -> Properties
                    -> CalendarProperty
                        -> Name: SUMMARY
                        -> Value: My Event
                    -> CalendarProperty
                        -> Name: DTSTART
                        -> Value
                            -> Type: iCalDateTime
                            -> Value: 20100703T080000
                        -> Parameters
                            -> CalendarParameter: TZID=MST
                    -> CalendarProperty
                        -> Name: DTEND
                        -> Value
                            -> Type: iCalDateTime
                            -> Value: 20100703T090000
                        -> Parameters
                            -> CalendarParameter: TZID=MST
            </example>
            The problem with this is that, in order to serialize the value
            of DTSTART and DTEND properly, they need to be aware of the
            TZID parameters that were attached to the event properties.
            This is very important when the parameter itself hints at
            different types of serialization.  Some examples are:
            
            ENCODING=BASE64
            VALUE=DATE
            
            That is why the AssociatedCalendarParameterList was created.
            This class associates a CalendarDataType-based property value 
            with the property itself, so it can be serialized correctly.
            </summary>
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetDates(iCal.IDateTime,System.DateTime,System.DateTime,System.Int32,iCal.IRecurrencePattern,System.Boolean)">
            Returns a list of start dates in the specified period represented by this recur. This method includes a base date
            argument, which indicates the start of the fist occurrence of this recurrence. The base date is used to inject
            default values to return a set of dates in the correct format. For example, if the search start date (start) is
            Wed, Mar 23, 12:19PM, but the recurrence is Mon - Fri, 9:00AM - 5:00PM, the start dates returned should all be at
            9:00AM, and not 12:19PM.
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetNextDate(iCal.IDateTime,System.DateTime,iCal.IRecurrencePattern)">
            Returns the the next date of this recurrence given a seed date
            and start date.  The seed date indicates the start of the fist 
            occurrence of this recurrence. The start date is the
            starting date to search for the next recurrence.  Return null
            if there is no occurrence date after start date.
            @return the next date in the recurrence series after startDate
            @param seed the start date of this Recurrence's first instance
            @param startDate the date to start the search
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetCandidates(System.DateTime,iCal.IRecurrencePattern)">
            Returns a list of possible dates generated from the applicable BY* rules, using the specified date as a seed.
            @param date the seed date
            @param value the type of date list to return
            @return a DateList
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.ApplySetPosRules(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYSETPOS rules to <code>dates</code>. Valid positions are from 1 to the size of the date list. Invalid
            positions are ignored.
            @param dates
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetMonthVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYMONTH rules specified in this Recur instance to the specified date list. If no BYMONTH rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetWeekNoVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYWEEKNO rules specified in this Recur instance to the specified date list. If no BYWEEKNO rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetYearDayVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYYEARDAY rules specified in this Recur instance to the specified date list. If no BYYEARDAY rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetMonthDayVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYMONTHDAY rules specified in this Recur instance to the specified date list. If no BYMONTHDAY rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetDayVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYDAY rules specified in this Recur instance to the specified date list. If no BYDAY rules are specified
            the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetAbsWeekDays(System.DateTime,iCal.IWeekDay,iCal.IRecurrencePattern)">
            Returns a list of applicable dates corresponding to the specified week day in accordance with the frequency
            specified by this recurrence rule.
            @param date
            @param weekDay
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetOffsetDates(System.Collections.Generic.List{System.DateTime},System.Int32)">
            Returns a single-element sublist containing the element of <code>list</code> at <code>offset</code>. Valid
            offsets are from 1 to the size of the list. If an invalid offset is supplied, all elements from <code>list</code>
            are added to <code>sublist</code>.
            @param list
            @param offset
            @param sublist
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetHourVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYHOUR rules specified in this Recur instance to the specified date list. If no BYHOUR rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetMinuteVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYMINUTE rules specified in this Recur instance to the specified date list. If no BYMINUTE rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="M:iCal.RecurrencePatternEvaluator.GetSecondVariants(System.Collections.Generic.List{System.DateTime},iCal.IRecurrencePattern)">
            Applies BYSECOND rules specified in this Recur instance to the specified date list. If no BYSECOND rules are
            specified the date list is returned unmodified.
            @param dates
            @return
        </member>
        <member name="T:iCal.RequestStatus">
            <summary>
            A class that represents the return status of an iCalendar request.
            </summary>
        </member>
        <member name="M:antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.Create">
            <summary>
            Constructs a <see cref="T:antlr.Token"/> instance.
            </summary>
        </member>
        <member name="P:antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.TokenTypeName">
            <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
        </member>
        <member name="T:vCards.vCardPhoto">
            <summary>
                A photo embedded in a vCard.
            </summary>
            <remarks>
                <para>
                    You must specify the photo using a path, a byte array,
                    or a System.Drawing.Bitmap instance. The class will
                    extract the underlying raw bytes for storage into the
                    vCard.  You can call the <see cref="!:GetBitmap"/> function
                    to create a new Windows bitmap object (e.g. for display
                    on a form) or <see cref="M:vCards.vCardPhoto.GetBytes"/> to extract the raw
                    bytes (e.g. for transmission from a web page).
                </para>
            </remarks>
        </member>
        <member name="F:vCards.vCardPhoto.data">
            <summary>
                The raw bytes of the image data.
            </summary>
            <remarks>
                The raw bytes can be passed directly to the photo object
                or fetched from a file or remote URL.  A .NET bitmap object
                can also be specified, in which case the constructor
                will load the raw bytes from the bitmap.
            </remarks>
        </member>
        <member name="F:vCards.vCardPhoto.url">
            <summary>
                The url of the image.
            </summary>
        </member>
        <member name="M:vCards.vCardPhoto.#ctor(System.Byte[],vCards.vCardPhoto.PhotoImageFormat)">
            <summary>
                Loads a photograph from an array of bytes.
            </summary>
            <param name="buffer">
                An array of bytes containing the raw data from
                any of the supported image formats.
            </param>
        </member>
        <member name="M:vCards.vCardPhoto.#ctor(System.Uri)">
            <summary>
                The URL of the image.
            </summary>
            <param name="url">
                A URL pointing to an image.
            </param>
        </member>
        <member name="M:vCards.vCardPhoto.#ctor(System.String)">
            <summary>
                Creates a new vCard photo from an image file.
            </summary>
            <param name="path">
                The path to an image of any supported format.
            </param>
        </member>
        <member name="M:vCards.vCardPhoto.Fetch">
            <summary>
                Fetches a linked image asynchronously.
            </summary>
            <remarks>
                This is a simple utility method for accessing the image
                referenced by the URL.  For asynchronous or advanced
                loading you will need to download the image yourself
                and load the bytes directly into the class.
            </remarks>
            <seealso cref="P:vCards.vCardPhoto.IsLoaded"/>
            <seealso cref="P:vCards.vCardPhoto.Url"/>
        </member>
        <member name="M:vCards.vCardPhoto.GetBytes">
            <summary>
                Returns a copy of the raw bytes of the image.
            </summary>
            <returns>
                A byte array containing the raw bytes of the image.
            </returns>
            <remarks>
                A copy of the raw bytes are returned.  Modifying the
                array will not modify the photo.
            </remarks>
        </member>
        <member name="P:vCards.vCardPhoto.IsLoaded">
            <summary>
                Indicates the bytes of the raw image have
                been loaded by the object.
            </summary>
            <seealso cref="M:vCards.vCardPhoto.Fetch"/>
        </member>
        <member name="P:vCards.vCardPhoto.Url">
            <summary>
                The URL of the image.
            </summary>
            <remarks>
                Changing the URL will automatically invalidate the internal
                image data if previously fetched.
            </remarks>
            <seealso cref="M:vCards.vCardPhoto.Fetch"/>
        </member>
        <member name="T:vCards.vCardEmailAddressType">
            <summary>
                Identifies the type of email address in a vCard.
            </summary>
            <seealso cref="T:vCards.vCardEmailAddress"/>
        </member>
        <member name="F:vCards.vCardEmailAddressType.Internet">
            <summary>
                An Internet (SMTP) mail (default) address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.AOL">
            <summary>
                An America On-Line email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.AppleLink">
            <summary>
                An AppleLink email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.AttMail">
            <summary>
                An AT&amp;T Mail email address
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.CompuServe">
            <summary>
                A CompuServe Information Service (CIS) email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.eWorld">
            <summary>
                An eWorld email address.
            </summary>
            <remarks>
                eWorld was an online service by Apple Computer in the mid 1990s.
                It was officially shut down on March 31, 1996.
            </remarks>
        </member>
        <member name="F:vCards.vCardEmailAddressType.IBMMail">
            <summary>
                An IBM Mail email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.MCIMail">
            <summary>
                An MCI Mail email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.PowerShare">
            <summary>
                A PowerShare email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.Prodigy">
            <summary>
                A Prodigy Information Service email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.Telex">
            <summary>
                A telex email address.
            </summary>
        </member>
        <member name="F:vCards.vCardEmailAddressType.X400">
            <summary>
                An X.400 service email address.
            </summary>
        </member>
        <member name="T:iCal.iCalendarCollection">
            <summary>
            A list of iCalendars.
            </summary>
        </member>
        <member name="T:iCal.CalendarPropertyCompositeList`1">
            <summary>
            This class takes multiple calendar properties/property values
            and consolidates them into a single list.
            
            <example>
            Consider the following example:
            
            BEGIN:VEVENT
            CATEGORIES:APPOINTMENT,EDUCATION
            CATEGORIES:MEETING
            END:EVENT
            </example>
            
            When we process this event, we don't really care that there
            are 2 different CATEGORIES properties, no do we care that
            the first CATEGORIES property has 2 values, whereas the 
            second CATEGORIES property only has 1 value.  In the end,
            we want a list of 3 values: APPOINTMENT, EDUCATION, and MEETING.
            
            This class consolidates properties of a given name into a list,
            and allows you to work with those values directly against the
            properties themselves.  This preserves the notion that our values
            are still stored directly within the calendar property, but gives
            us the flexibility to work with multiple properties through a
            single (composite) list.
            </summary>
        </member>
        <member name="T:iCal.Period">
            <summary>
            Represents an iCalendar period of time.
            </summary>    
        </member>
        <member name="P:iCal.Period.MatchesDateOnly">
            <summary>
            When true, comparisons between this and other <see cref="T:iCal.Period"/>
            objects are matched against the date only, and
            not the date-time combination.
            </summary>
        </member>
        <member name="T:iCal.Organizer">
            <summary>
            A class that represents the organizer of an event/todo/journal.
            </summary>
        </member>
        <member name="M:antlr.MismatchedCharException.appendCharName(System.Text.StringBuilder,System.Int32)">
            <summary>
            Append a char to the msg buffer.  If special, then show escaped version
            </summary>
            <param name="sb">Message buffer</param>
            <param name="c">Char to append</param>
        </member>
        <member name="T:antlr.DumpASTVisitor">
            <summary>
            Summary description for DumpASTVisitor.
            </summary>
            Simple class to dump the contents of an AST to the output 
        </member>
        <member name="M:antlr.debug.InputBufferEventArgs.setValues(System.Int32,System.Char,System.Int32)">
            <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
        </member>
        <member name="P:iCal.Serialization.iCalendar.SerializationInfo.Line">
            <summary>
            Returns the line number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="P:iCal.Serialization.iCalendar.SerializationInfo.Column">
            <summary>
            Returns the column number where this calendar
            object was found during parsing.
            </summary>
        </member>
        <member name="T:iCal.RecurringComponentDateSorter">
            <summary>
            Sorts recurring components by their start dates
            </summary>
        </member>
        <member name="T:antlr.ASTFactory">
            <summary>
            AST Support code shared by TreeParser and Parser.
            </summary>
            <remarks>
            <para>
            We use delegation to share code (and have only one 
            bit of code to maintain) rather than subclassing
            or superclassing (forces AST support code to be
            loaded even when you don't want to do AST stuff).
            </para>
            <para>
            Typically, <see cref="M:antlr.ASTFactory.setASTNodeType(System.String)"/>  is used to specify the
            homogeneous type of node to create, but you can override
            <see cref="M:antlr.ASTFactory.create"/>  to make heterogeneous nodes etc...
            </para>
            </remarks>
        </member>
        <member name="M:antlr.ASTFactory.#ctor">
            <summary>
            Constructs an <c>ASTFactory</c> with the default AST node type of
            <see cref="T:antlr.CommonAST"/>.
            </summary>
        </member>
        <member name="M:antlr.ASTFactory.#ctor(System.String)">
            <summary>
            Constructs an <c>ASTFactory</c> and use the specified AST node type
            as the default.
            </summary>
            <param name="nodeTypeName">
            	Name of default AST node type for this factory.
            </param>
        </member>
        <member name="M:antlr.ASTFactory.#ctor(System.Type)">
            <summary>
            Constructs an <c>ASTFactory</c> and use the specified AST node type
            as the default.
            </summary>
            <param name="nodeType">
            	MetaType of default AST node type for this factory.
            </param>
        </member>
        <member name="F:antlr.ASTFactory.defaultASTNodeTypeObject_">
            <summary>
            Stores the Type of the default AST node class to be used during tree construction.
            </summary>
        </member>
        <member name="F:antlr.ASTFactory.heteroList_">
            <summary>
            Stores the mapping between custom AST NodeTypes and their NodeTypeName/NodeTypeClass
            and ASTNodeCreator.
            </summary>
        </member>
        <member name="F:antlr.ASTFactory.typename2creator_">
            <summary>
            Stores the mapping between AST node typenames and their token ID.
            </summary>
        </member>
        <member name="M:antlr.ASTFactory.setTokenTypeASTNodeType(System.Int32,System.String)">
            <summary>
            Specify an "override" for the <see cref="T:antlr.collections.AST"/> type created for
            the specified Token type.
            </summary>
            <remarks>
            This method is useful for situations that ANTLR cannot oridinarily deal 
            with (i.e., when you  create a token based upon a nonliteral token symbol 
            like #[LT(1)].  This is a runtime value and ANTLR cannot determine the token 
            type (and hence the AST) statically.
            </remarks>
            <param name="tokenType">Token type to override.</param>
            <param name="NodeTypeName">
            	Fully qualified AST typename (or null to specify 
            	the factory's default AST type).
            </param>
        </member>
        <member name="M:antlr.ASTFactory.registerFactory(System.Int32,System.String)">
            <summary>
            Register an AST Node Type for a given Token type ID.
            </summary>
            <param name="NodeType">The Token type ID.</param>
            <param name="NodeTypeName">The AST Node Type to register.</param>
        </member>
        <member name="M:antlr.ASTFactory.setTokenTypeASTNodeCreator(System.Int32,antlr.ASTNodeCreator)">
            <summary>
            Register an ASTNodeCreator for a given Token type ID.
            </summary>
            <param name="NodeType">The Token type ID.</param>
            <param name="creator">The creater to register.</param>
        </member>
        <member name="M:antlr.ASTFactory.setASTNodeCreator(antlr.ASTNodeCreator)">
            <summary>
            Register an ASTNodeCreator to be used for creating node by default.
            </summary>
            <param name="creator">The ASTNodeCreator.</param>
        </member>
        <member name="M:antlr.ASTFactory.setMaxNodeType(System.Int32)">
            <summary>
            Pre-expands the internal list of TokenTypeID-to-ASTNodeType mappings
            to the specified size.
            This is primarily a convenience method that can be used to prevent 
            unnecessary and costly re-org of the mappings list.
            </summary>
            <param name="NodeType">Maximum Token Type ID.</param>
        </member>
        <member name="M:antlr.ASTFactory.addASTChild(antlr.ASTPair@,antlr.collections.AST)">
            <summary>
            Add a child to the current AST
            </summary>
            <param name="currentAST">The AST to add a child to</param>
            <param name="child">The child AST to be added</param>
        </member>
        <member name="M:antlr.ASTFactory.create">
            <summary>
            Creates a new uninitialized AST node. Since a specific AST Node Type
            wasn't indicated, the new AST node is created using the current default
            AST Node type - <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/>
            </summary>
            <returns>An uninitialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(System.Int32)">
            <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(System.Int32,System.String)">
            <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <param name="txt">Text for initializing the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(System.Int32,System.String,System.String)">
            <summary>
            Creates a new AST node using the specified AST Node Type name. Once created,
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined solely by <c>ASTNodeTypeName</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
            <param name="type">Token type ID to be used to create new AST Node.</param>
            <param name="txt">Text for initializing the new AST Node.</param>
            <param name="ASTNodeTypeName">Fully qualified name of the Type to be used for creating the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(antlr.IToken,System.String)">
            <summary>
            Creates a new AST node using the specified AST Node Type name.
            </summary>
            <param name="tok">Token instance to be used to initialize the new AST Node.</param>
            <param name="ASTNodeTypeName">
            	Fully qualified name of the Type to be used for creating the new AST Node.
            </param>
            <returns>A newly created and initialized AST node object.</returns>
            <remarks>
            Once created, the new AST node is initialized with the specified Token 
            instance. The <see cref="T:System.Type"/> used for creating this new AST 
            node is  determined solely by <c>ASTNodeTypeName</c>.
            <para>The AST Node type must have a default/parameterless constructor.</para>
            </remarks>
        </member>
        <member name="M:antlr.ASTFactory.create(antlr.collections.AST)">
            <summary>
            Creates and initializes a new AST node using the specified AST Node instance.
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined solely by <c>aNode</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
            <param name="aNode">AST Node instance to be used for creating the new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.create(antlr.IToken)">
            <summary>
            Creates and initializes a new AST node using the specified Token instance.
            The <see cref="T:System.Type"/> used for creating this new AST node is 
            determined by the following:
            <list type="bullet">
            	<item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item>
            	<item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_"/> otherwise</item>
            </list>
            </summary>
            <param name="tok">Token instance to be used to create new AST Node.</param>
            <returns>An initialized AST node object.</returns>
        </member>
        <member name="M:antlr.ASTFactory.dup(antlr.collections.AST)">
            <summary>
            Returns a copy of the specified AST Node instance. The copy is obtained by
            using the <see cref="T:System.ICloneable"/> method Clone().
            </summary>
            <param name="t">AST Node to copy.</param>
            <returns>An AST Node (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:antlr.ASTFactory.dupList(antlr.collections.AST)">
            <summary>
            Duplicate AST Node tree rooted at specified AST node and all of it's siblings.
            </summary>
            <param name="t">Root of AST Node tree.</param>
            <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:antlr.ASTFactory.dupTree(antlr.collections.AST)">
            <summary>
            Duplicate AST Node tree rooted at specified AST node. Ignore it's siblings.
            </summary>
            <param name="t">Root of AST Node tree.</param>
            <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
        </member>
        <member name="M:antlr.ASTFactory.make(antlr.collections.AST[])">
            <summary>
            Make a tree from a list of nodes.  The first element in the
            array is the root.  If the root is null, then the tree is
            a simple list not a tree.  Handles null children nodes correctly.
            For example, build(a, b, null, c) yields tree (a b c).  build(null,a,b)
            yields tree (nil a b).
            </summary>
            <param name="nodes">List of Nodes.</param>
            <returns>AST Node tree.</returns>
        </member>
        <member name="M:antlr.ASTFactory.make(antlr.collections.impl.ASTArray)">
            <summary>
            Make a tree from a list of nodes, where the nodes are contained
            in an ASTArray object.
            </summary>
            <param name="nodes">List of Nodes.</param>
            <returns>AST Node tree.</returns>
        </member>
        <member name="M:antlr.ASTFactory.makeASTRoot(antlr.ASTPair@,antlr.collections.AST)">
            <summary>
            Make an AST the root of current AST.
            </summary>
            <param name="currentAST"></param>
            <param name="root"></param>
        </member>
        <member name="M:antlr.ASTFactory.setASTNodeType(System.String)">
            <summary>
            Sets the global default AST Node Type for this ASTFactory instance.
            This method also attempts to load the <see cref="T:System.Type"/> instance
            for the specified typename.
            </summary>
            <param name="t">Fully qualified AST Node Type name.</param>
        </member>
        <member name="M:antlr.ASTFactory.error(System.String)">
            <summary>
            To change where error messages go, can subclass/override this method
            and then setASTFactory in Parser and TreeParser.  This method removes
            a prior dependency on class antlr.Tool.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:antlr.debug.ScannerEventSupport">
            <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
        </member>
    </members>
</doc>
